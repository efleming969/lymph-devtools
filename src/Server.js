"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Express = require("express");
const Typescript = require("typescript");
const FS = require("fs-extra");
const Path = require("path");
const Templates = require("./Templates");
const Styles = require("./Styles");
const createPathFromRoot = root => base_name => Path.join(process.cwd(), root, base_name);
const changeCase = s => s.split("-").map(w => w[0].toUpperCase() + w.slice(1)).join("");
exports.run = function (config) {
    const app = Express();
    const pathFromRoot = createPathFromRoot(config.root);
    app.get("/:module_name.html", function (req, res) {
        const module_name = req.params.module_name;
        const module_config_path = pathFromRoot(`${module_name}.json`);
        res.header("content-type", "text/html");
        FS.readFile(module_config_path, "utf8")
            .then(raw_config => JSON.parse(raw_config))
            .then(config => Object.assign({}, config, { dev: true }))
            .then(Templates.render)
            .then(template => res.send(template));
    });
    app.get("/node_modules/*", function (req, res) {
        res.sendFile(Path.join(process.cwd(), req.url));
    });
    app.get("/scripts/*", function (req, res) {
        const source_file = pathFromRoot(req.url + ".ts");
        const import_regex = /import (.*) from "([a-zA-Z\-]*)"/g;
        FS.readFile(source_file, "utf8", function (err, file) {
            if (err)
                res.send(err);
            const result = Typescript.transpileModule(file, {
                compilerOptions: {
                    module: Typescript.ModuleKind.ES2015,
                    inlineSources: true,
                    inlineSourceMap: true
                },
                fileName: source_file
            });
            res.header({ "content-type": "application/javascript" });
            res.send(result.outputText.replace(import_regex, function (match, p1, p2) {
                return `const ${p1} = ${changeCase(p2)}`;
            }));
        });
    });
    app.get("/styles/*", function (req, res) {
        const source_file = Path.join(process.cwd(), config.root, req.url);
        Styles.stream({
            name: "",
            input: source_file,
            output: ""
        }).then(function (css) {
            res.header({ "content-type": "text/css" });
            res.send(css);
        });
    });
    app.use(Express.static(config.root));
    app.listen(config.port, function () {
        console.log(`server running @ ${config.port}`);
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiU2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQWtDO0FBQ2xDLHlDQUF3QztBQUN4QywrQkFBOEI7QUFDOUIsNkJBQTRCO0FBRTVCLHlDQUF3QztBQUN4QyxtQ0FBa0M7QUFFbEMsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQzNDLElBQUksQ0FBQyxJQUFJLENBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUUsQ0FBQTtBQUUvQyxNQUFNLFVBQVUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUNuQixDQUFDLENBQUMsS0FBSyxDQUFFLEdBQUcsQ0FBRSxDQUFDLEdBQUcsQ0FBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBRSxDQUFDLENBQUUsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFFLENBQUMsQ0FBRSxDQUFFLENBQUMsSUFBSSxDQUFFLEVBQUUsQ0FBRSxDQUFBO0FBRWhFLFFBQUEsR0FBRyxHQUFHLFVBQVcsTUFBTTtJQUVoQyxNQUFNLEdBQUcsR0FBRyxPQUFPLEVBQUUsQ0FBQTtJQUNyQixNQUFNLFlBQVksR0FBRyxrQkFBa0IsQ0FBRSxNQUFNLENBQUMsSUFBSSxDQUFFLENBQUE7SUFFdEQsR0FBRyxDQUFDLEdBQUcsQ0FBRSxvQkFBb0IsRUFBRSxVQUFXLEdBQUcsRUFBRSxHQUFHO1FBQzlDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFBO1FBQzFDLE1BQU0sa0JBQWtCLEdBQUcsWUFBWSxDQUFFLEdBQUksV0FBWSxPQUFPLENBQUUsQ0FBQTtRQUVsRSxHQUFHLENBQUMsTUFBTSxDQUFFLGNBQWMsRUFBRSxXQUFXLENBQUUsQ0FBQTtRQUV6QyxFQUFFLENBQUMsUUFBUSxDQUFFLGtCQUFrQixFQUFF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QyxNQUFNLENBQUUsTUFBTSxDQUFDLElBQUksRUFBRTtRQUNyQixPQUFPLENBQUMsR0FBRyxDQUFFLG9CQUFxQixNQUFNLENBQUMsSUFBSyxFQUFFLENBQUUsQ0FBQTtJQUN0RCxDQUFDLENBQUUsQ0FBQTtBQUNQLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIlxuaW1wb3J0ICogYXMgVHlwZXNjcmlwdCBmcm9tIFwidHlwZXNjcmlwdFwiXG5pbXBvcnQgKiBhcyBGUyBmcm9tIFwiZnMtZXh0cmFcIlxuaW1wb3J0ICogYXMgUGF0aCBmcm9tIFwicGF0aFwiXG5cbmltcG9ydCAqIGFzIFRlbXBsYXRlcyBmcm9tIFwiLi9UZW1wbGF0ZXNcIlxuaW1wb3J0ICogYXMgU3R5bGVzIGZyb20gXCIuL1N0eWxlc1wiXG5cbmNvbnN0IGNyZWF0ZVBhdGhGcm9tUm9vdCA9IHJvb3QgPT4gYmFzZV9uYW1lID0+XG4gICAgUGF0aC5qb2luKCBwcm9jZXNzLmN3ZCgpLCByb290LCBiYXNlX25hbWUgKVxuXG5jb25zdCBjaGFuZ2VDYXNlID0gcyA9PlxuICAgIHMuc3BsaXQoIFwiLVwiICkubWFwKCB3ID0+IHdbIDAgXS50b1VwcGVyQ2FzZSgpICsgdy5zbGljZSggMSApICkuam9pbiggXCJcIiApXG5cbmV4cG9ydCBjb25zdCBydW4gPSBmdW5jdGlvbiAoIGNvbmZpZyApIHtcblxuICAgIGNvbnN0IGFwcCA9IEV4cHJlc3MoKVxuICAgIGNvbnN0IHBhdGhGcm9tUm9vdCA9IGNyZWF0ZVBhdGhGcm9tUm9vdCggY29uZmlnLnJvb3QgKVxuXG4gICAgYXBwLmdldCggXCIvOm1vZHVsZV9uYW1lLmh0bWxcIiwgZnVuY3Rpb24gKCByZXEsIHJlcyApIHtcbiAgICAgICAgY29uc3QgbW9kdWxlX25hbWUgPSByZXEucGFyYW1zLm1vZHVsZV9uYW1lXG4gICAgICAgIGNvbnN0IG1vZHVsZV9jb25maWdfcGF0aCA9IHBhdGhGcm9tUm9vdCggYCR7IG1vZHVsZV9uYW1lIH0uanNvbmAgKVxuXG4gICAgICAgIHJlcy5oZWFkZXIoIFwiY29udGVudC10eXBlXCIsIFwidGV4dC9odG1sXCIgKVxuXG4gICAgICAgIEZTLnJlYWRGaWxlKCBtb2R1bGVfY29uZmlnX3BhdGgsIFwidXRmOFwiIClcbiAgICAgICAgICAgIC50aGVuKCByYXdfY29uZmlnID0+IEpTT04ucGFyc2UoIHJhd19jb25maWcgKSApXG4gICAgICAgICAgICAudGhlbiggY29uZmlnID0+IE9iamVjdC5hc3NpZ24oIHt9LCBjb25maWcsIHsgZGV2OiB0cnVlIH0gKSApXG4gICAgICAgICAgICAudGhlbiggVGVtcGxhdGVzLnJlbmRlciApXG4gICAgICAgICAgICAudGhlbiggdGVtcGxhdGUgPT4gcmVzLnNlbmQoIHRlbXBsYXRlICkgKVxuICAgIH0gKVxuXG4gICAgYXBwLmdldCggXCIvbm9kZV9tb2R1bGVzLypcIiwgZnVuY3Rpb24gKCByZXEsIHJlcyApIHtcbiAgICAgICAgcmVzLnNlbmRGaWxlKCBQYXRoLmpvaW4oIHByb2Nlc3MuY3dkKCksIHJlcS51cmwgKSApXG4gICAgfSApXG5cbiAgICBhcHAuZ2V0KCBcIi9zY3JpcHRzLypcIiwgZnVuY3Rpb24gKCByZXEsIHJlcyApIHtcbiAgICAgICAgY29uc3Qgc291cmNlX2ZpbGUgPSBwYXRoRnJvbVJvb3QoIHJlcS51cmwgKyBcIi50c1wiIClcbiAgICAgICAgY29uc3QgaW1wb3J0X3JlZ2V4ID0gL2ltcG9ydCAoLiopIGZyb20gXCIoW2EtekEtWlxcLV0qKVwiL2dcblxuICAgICAgICBGUy5yZWFkRmlsZSggc291cmNlX2ZpbGUsIFwidXRmOFwiLCBmdW5jdGlvbiAoIGVyciwgZmlsZSApIHtcbiAgICAgICAgICAgIGlmICggZXJyICkgcmVzLnNlbmQoIGVyciApXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBUeXBlc2NyaXB0LnRyYW5zcGlsZU1vZHVsZSggZmlsZSwge1xuICAgICAgICAgICAgICAgIGNvbXBpbGVyT3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICBtb2R1bGU6IFR5cGVzY3JpcHQuTW9kdWxlS2luZC5FUzIwMTUsXG4gICAgICAgICAgICAgICAgICAgIGlubGluZVNvdXJjZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGlubGluZVNvdXJjZU1hcDogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZmlsZU5hbWU6IHNvdXJjZV9maWxlXG4gICAgICAgICAgICB9IClcbiAgICAgICAgICAgIHJlcy5oZWFkZXIoIHsgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qYXZhc2NyaXB0XCIgfSApXG5cbiAgICAgICAgICAgIHJlcy5zZW5kKCByZXN1bHQub3V0cHV0VGV4dC5yZXBsYWNlKCBpbXBvcnRfcmVnZXgsIGZ1bmN0aW9uICggbWF0Y2gsIHAxLCBwMiApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYGNvbnN0ICR7IHAxIH0gPSAkeyBjaGFuZ2VDYXNlKCBwMiApIH1gXG4gICAgICAgICAgICB9ICkgKVxuXG4gICAgICAgIH0gKVxuICAgIH0gKVxuXG4gICAgYXBwLmdldCggXCIvc3R5bGVzLypcIiwgZnVuY3Rpb24gKCByZXEsIHJlcyApIHtcbiAgICAgICAgY29uc3Qgc291cmNlX2ZpbGUgPSBQYXRoLmpvaW4oIHByb2Nlc3MuY3dkKCksIGNvbmZpZy5yb290LCByZXEudXJsIClcbiAgICAgICAgU3R5bGVzLnN0cmVhbSgge1xuICAgICAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgICAgIGlucHV0OiBzb3VyY2VfZmlsZSxcbiAgICAgICAgICAgIG91dHB1dDogXCJcIlxuICAgICAgICB9ICkudGhlbiggZnVuY3Rpb24gKCBjc3MgKSB7XG4gICAgICAgICAgICByZXMuaGVhZGVyKCB7IFwiY29udGVudC10eXBlXCI6IFwidGV4dC9jc3NcIiB9IClcbiAgICAgICAgICAgIHJlcy5zZW5kKCBjc3MgKVxuICAgICAgICB9IClcbiAgICB9IClcblxuICAgIGFwcC51c2UoIEV4cHJlc3Muc3RhdGljKCBjb25maWcucm9vdCApIClcblxuICAgIGFwcC5saXN0ZW4oIGNvbmZpZy5wb3J0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCBgc2VydmVyIHJ1bm5pbmcgQCAkeyBjb25maWcucG9ydCB9YCApXG4gICAgfSApXG59XG4iXX0=