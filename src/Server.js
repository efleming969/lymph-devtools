"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Express = require("express");
const Typescript = require("typescript");
const FS = require("fs-extra");
const Path = require("path");
const Templates = require("./Templates");
const Styles = require("./Styles");
const createPathFromRoot = root => base_name => Path.join(process.cwd(), root, base_name);
const changeCase = s => s.split("-").map(w => w[0].toUpperCase() + w.slice(1)).join("");
exports.run = function (config) {
    const app = Express();
    const pathFromRoot = createPathFromRoot(config.root);
    app.get("/:module_name.html", function (req, res) {
        const module_name = req.params.module_name;
        const module_config_path = pathFromRoot(`${module_name}.json`);
        res.header("content-type", "text/html");
        Templates.read(module_config_path)
            .then(template => Object.assign({}, template, { dev: true }))
            .then(Templates.render)
            .then(template => res.send(template.text));
    });
    app.get("/node_modules/*", function (req, res) {
        res.sendFile(Path.join(process.cwd(), req.url));
    });
    app.get("/scripts/*", function (req, res) {
        const source_file = pathFromRoot(req.url + ".ts");
        const import_regex = /import (.*) from "([a-zA-Z\-]*)"/g;
        FS.readFile(source_file, "utf8", function (err, file) {
            if (err)
                res.send(err);
            const result = Typescript.transpileModule(file, {
                compilerOptions: {
                    module: Typescript.ModuleKind.ES2015,
                    inlineSources: true,
                    inlineSourceMap: true
                },
                fileName: source_file
            });
            res.header({ "content-type": "application/javascript" });
            res.send(result.outputText.replace(import_regex, function (match, p1, p2) {
                return `const ${p1} = ${changeCase(p2)}`;
            }));
        });
    });
    app.get("/styles/*", function (req, res) {
        const source_file = Path.join(process.cwd(), config.root, req.url);
        Styles.stream({
            name: "",
            input: source_file,
            output: ""
        }).then(function (css) {
            res.header({ "content-type": "text/css" });
            res.send(css);
        });
    });
    app.use(Express.static(config.root));
    app.listen(config.port, function () {
        console.log(`server running @ ${config.port}`);
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiU2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQWtDO0FBQ2xDLHlDQUF3QztBQUN4QywrQkFBOEI7QUFDOUIsNkJBQTRCO0FBRTVCLHlDQUF3QztBQUN4QyxtQ0FBa0M7QUFFbEMsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQzNDLElBQUksQ0FBQyxJQUFJLENBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUUsQ0FBQTtBQUUvQyxNQUFNLFVBQVUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUNuQixDQUFDLENBQUMsS0FBSyxDQUFFLEdBQUcsQ0FBRSxDQUFDLEdBQUcsQ0FBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBRSxDQUFDLENBQUUsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFFLENBQUMsQ0FBRSxDQUFFLENBQUMsSUFBSSxDQUFFLEVBQUUsQ0FBRSxDQUFBO0FBRWhFLFFBQUEsR0FBRyxHQUFHLFVBQVcsTUFBTTtJQUVoQyxNQUFNLEdBQUcsR0FBRyxPQUFPLEVBQUUsQ0FBQTtJQUNyQixNQUFNLFlBQVksR0FBRyxrQkFBa0IsQ0FBRSxNQUFNLENBQUMsSUFBSSxDQUFFLENBQUE7SUFFdEQsR0FBRyxDQUFDLEdBQUcsQ0FBRSxvQkFBb0IsRUFBRSxVQUFXLEdBQUcsRUFBRSxHQUFHO1FBQzlDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFBO1FBQzFDLE1BQU0sa0JBQWtCLEdBQUcsWUFBWSxDQUFFLEdBQUksV0FBWSxPQUFPLENBQUUsQ0FBQTtRQUVsRSxHQUFHLENBQUMsTUFBTSxDQUFFLGNBQWMsRUFBRSxXQUFXLENBQUUsQ0FBQTtRQUV6QyxTQUFTLENBQUMsSUFBSSxDQUFFLGtCQUFrQixDQUFF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QUFDLElBQUssRUFBRSxDQUFFLENBQUE7SUFDdEQsQ0FBQyxDQUFFLENBQUE7QUFDUCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBFeHByZXNzIGZyb20gXCJleHByZXNzXCJcbmltcG9ydCAqIGFzIFR5cGVzY3JpcHQgZnJvbSBcInR5cGVzY3JpcHRcIlxuaW1wb3J0ICogYXMgRlMgZnJvbSBcImZzLWV4dHJhXCJcbmltcG9ydCAqIGFzIFBhdGggZnJvbSBcInBhdGhcIlxuXG5pbXBvcnQgKiBhcyBUZW1wbGF0ZXMgZnJvbSBcIi4vVGVtcGxhdGVzXCJcbmltcG9ydCAqIGFzIFN0eWxlcyBmcm9tIFwiLi9TdHlsZXNcIlxuXG5jb25zdCBjcmVhdGVQYXRoRnJvbVJvb3QgPSByb290ID0+IGJhc2VfbmFtZSA9PlxuICAgIFBhdGguam9pbiggcHJvY2Vzcy5jd2QoKSwgcm9vdCwgYmFzZV9uYW1lIClcblxuY29uc3QgY2hhbmdlQ2FzZSA9IHMgPT5cbiAgICBzLnNwbGl0KCBcIi1cIiApLm1hcCggdyA9PiB3WyAwIF0udG9VcHBlckNhc2UoKSArIHcuc2xpY2UoIDEgKSApLmpvaW4oIFwiXCIgKVxuXG5leHBvcnQgY29uc3QgcnVuID0gZnVuY3Rpb24gKCBjb25maWcgKSB7XG5cbiAgICBjb25zdCBhcHAgPSBFeHByZXNzKClcbiAgICBjb25zdCBwYXRoRnJvbVJvb3QgPSBjcmVhdGVQYXRoRnJvbVJvb3QoIGNvbmZpZy5yb290IClcblxuICAgIGFwcC5nZXQoIFwiLzptb2R1bGVfbmFtZS5odG1sXCIsIGZ1bmN0aW9uICggcmVxLCByZXMgKSB7XG4gICAgICAgIGNvbnN0IG1vZHVsZV9uYW1lID0gcmVxLnBhcmFtcy5tb2R1bGVfbmFtZVxuICAgICAgICBjb25zdCBtb2R1bGVfY29uZmlnX3BhdGggPSBwYXRoRnJvbVJvb3QoIGAkeyBtb2R1bGVfbmFtZSB9Lmpzb25gIClcblxuICAgICAgICByZXMuaGVhZGVyKCBcImNvbnRlbnQtdHlwZVwiLCBcInRleHQvaHRtbFwiIClcblxuICAgICAgICBUZW1wbGF0ZXMucmVhZCggbW9kdWxlX2NvbmZpZ19wYXRoIClcbiAgICAgICAgICAgIC50aGVuKCB0ZW1wbGF0ZSA9PiBPYmplY3QuYXNzaWduKCB7fSwgdGVtcGxhdGUsIHsgZGV2OiB0cnVlIH0gKSApXG4gICAgICAgICAgICAudGhlbiggVGVtcGxhdGVzLnJlbmRlciApXG4gICAgICAgICAgICAudGhlbiggdGVtcGxhdGUgPT4gcmVzLnNlbmQoIHRlbXBsYXRlLnRleHQgKSApXG4gICAgfSApXG5cbiAgICBhcHAuZ2V0KCBcIi9ub2RlX21vZHVsZXMvKlwiLCBmdW5jdGlvbiAoIHJlcSwgcmVzICkge1xuICAgICAgICByZXMuc2VuZEZpbGUoIFBhdGguam9pbiggcHJvY2Vzcy5jd2QoKSwgcmVxLnVybCApIClcbiAgICB9IClcblxuICAgIGFwcC5nZXQoIFwiL3NjcmlwdHMvKlwiLCBmdW5jdGlvbiAoIHJlcSwgcmVzICkge1xuICAgICAgICBjb25zdCBzb3VyY2VfZmlsZSA9IHBhdGhGcm9tUm9vdCggcmVxLnVybCArIFwiLnRzXCIgKVxuICAgICAgICBjb25zdCBpbXBvcnRfcmVnZXggPSAvaW1wb3J0ICguKikgZnJvbSBcIihbYS16QS1aXFwtXSopXCIvZ1xuXG4gICAgICAgIEZTLnJlYWRGaWxlKCBzb3VyY2VfZmlsZSwgXCJ1dGY4XCIsIGZ1bmN0aW9uICggZXJyLCBmaWxlICkge1xuICAgICAgICAgICAgaWYgKCBlcnIgKSByZXMuc2VuZCggZXJyIClcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IFR5cGVzY3JpcHQudHJhbnNwaWxlTW9kdWxlKCBmaWxlLCB7XG4gICAgICAgICAgICAgICAgY29tcGlsZXJPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZTogVHlwZXNjcmlwdC5Nb2R1bGVLaW5kLkVTMjAxNSxcbiAgICAgICAgICAgICAgICAgICAgaW5saW5lU291cmNlczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgaW5saW5lU291cmNlTWFwOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmaWxlTmFtZTogc291cmNlX2ZpbGVcbiAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgcmVzLmhlYWRlciggeyBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2phdmFzY3JpcHRcIiB9IClcblxuICAgICAgICAgICAgcmVzLnNlbmQoIHJlc3VsdC5vdXRwdXRUZXh0LnJlcGxhY2UoIGltcG9ydF9yZWdleCwgZnVuY3Rpb24gKCBtYXRjaCwgcDEsIHAyICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBgY29uc3QgJHsgcDEgfSA9ICR7IGNoYW5nZUNhc2UoIHAyICkgfWBcbiAgICAgICAgICAgIH0gKSApXG5cbiAgICAgICAgfSApXG4gICAgfSApXG5cbiAgICBhcHAuZ2V0KCBcIi9zdHlsZXMvKlwiLCBmdW5jdGlvbiAoIHJlcSwgcmVzICkge1xuICAgICAgICBjb25zdCBzb3VyY2VfZmlsZSA9IFBhdGguam9pbiggcHJvY2Vzcy5jd2QoKSwgY29uZmlnLnJvb3QsIHJlcS51cmwgKVxuICAgICAgICBTdHlsZXMuc3RyZWFtKCB7XG4gICAgICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICAgICAgaW5wdXQ6IHNvdXJjZV9maWxlLFxuICAgICAgICAgICAgb3V0cHV0OiBcIlwiXG4gICAgICAgIH0gKS50aGVuKCBmdW5jdGlvbiAoIGNzcyApIHtcbiAgICAgICAgICAgIHJlcy5oZWFkZXIoIHsgXCJjb250ZW50LXR5cGVcIjogXCJ0ZXh0L2Nzc1wiIH0gKVxuICAgICAgICAgICAgcmVzLnNlbmQoIGNzcyApXG4gICAgICAgIH0gKVxuICAgIH0gKVxuXG4gICAgYXBwLnVzZSggRXhwcmVzcy5zdGF0aWMoIGNvbmZpZy5yb290ICkgKVxuXG4gICAgYXBwLmxpc3RlbiggY29uZmlnLnBvcnQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc29sZS5sb2coIGBzZXJ2ZXIgcnVubmluZyBAICR7IGNvbmZpZy5wb3J0IH1gIClcbiAgICB9IClcbn1cbiJdfQ==