"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Express = require("express");
const Typescript = require("typescript");
const FS = require("fs-extra");
const Path = require("path");
const Templates = require("./Templates");
const Styles = require("./Styles");
const createPathFromRoot = root => function (base_name) {
    return Path.join(process.cwd(), root, base_name);
};
exports.run = function (config) {
    const app = Express();
    const pathFromRoot = createPathFromRoot(config.root);
    app.get("/:module_name.html", function (req, res) {
        const module_name = req.params.module_name;
        const module_config_path = pathFromRoot(`${module_name}.json`);
        res.header("content-type", "text/html");
        FS.readFile(module_config_path, "utf8")
            .then(raw_config => JSON.parse(raw_config))
            .then(config => Object.assign({}, config, { dev: true }))
            .then(Templates.render)
            .then(template => res.send(template));
    });
    app.get("/node_modules/*", function (req, res) {
        res.sendFile(Path.join(process.cwd(), req.url));
    });
    app.get("/scripts/*", function (req, res) {
        const source_file = Path.join(process.cwd(), config.root, req.url + ".ts");
        FS.readFile(source_file, "utf8", function (err, file) {
            if (err)
                res.send(err);
            const result = Typescript.transpileModule(file, {
                compilerOptions: {
                    module: Typescript.ModuleKind.ES2015,
                    inlineSources: true,
                    inlineSourceMap: true
                },
                fileName: source_file
            });
            res.header({ "content-type": "application/javascript" });
            const changeCase = s => s.split("-").map(w => w[0].toUpperCase() + w.slice(1)).join("");
            const import_regex = /import (.*) from "([a-zA-Z\-]*)"/g;
            res.send(result.outputText.replace(import_regex, function (match, p1, p2) {
                return `const ${p1} = ${changeCase(p2)}`;
            }));
        });
    });
    app.get("/styles/*", function (req, res) {
        const source_file = Path.join(process.cwd(), config.root, req.url);
        Styles.stream({
            name: "",
            input: source_file,
            output: ""
        }).then(function (css) {
            res.header({ "content-type": "text/css" });
            res.send(css);
        });
    });
    app.use(Express.static(config.root));
    app.listen(config.port, function () {
        console.log(`server running @ ${config.port}`);
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiU2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQWtDO0FBQ2xDLHlDQUF3QztBQUN4QywrQkFBOEI7QUFDOUIsNkJBQTRCO0FBRTVCLHlDQUF3QztBQUN4QyxtQ0FBa0M7QUFFbEMsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVcsU0FBaUI7SUFDM0QsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUUsQ0FBQTtBQUN0RCxDQUFDLENBQUE7QUFFWSxRQUFBLEdBQUcsR0FBRyxVQUFXLE1BQU07SUFFaEMsTUFBTSxHQUFHLEdBQUcsT0FBTyxFQUFFLENBQUE7SUFDckIsTUFBTSxZQUFZLEdBQUcsa0JBQWtCLENBQUUsTUFBTSxDQUFDLElBQUksQ0FBRSxDQUFBO0lBRXRELEdBQUcsQ0FBQyxHQUFHLENBQUUsb0JBQW9CLEVBQUUsVUFBVyxHQUFHLEVBQUUsR0FBRztRQUM5QyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQTtRQUMxQyxNQUFNLGtCQUFrQixHQUFHLFlBQVksQ0FBRSxHQUFJLFdBQVksT0FBTyxDQUFFLENBQUE7UUFFbEUsR0FBRyxDQUFDLE1BQU0sQ0FBRSxjQUFjLEVBQUUsV0FBVyxDQUFFLENBQUE7UUFFekMsRUFBRSxDQUFDLFFBQVEsQ0FBRSxrQkFBa0IsRUFBRSxNQUFNLENBQUU7YUFDcEMsSUFBSSxDQUFFLFVBQVUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBRSxVQUFVLENBQUUsQ0FBRTthQUM5QyxJQUFJLENBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUUsQ0FBRTthQUM1RCxJQUFJLENBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBRTthQUN4QixJQUFJLENBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFFLFFBQVEsQ0FBRSxDQUFFLENBQUE7SUFDakQsQ0FBQyxDQUFFLENBQUE7SUFFSCxHQUFHLENBQUMsR0FBRyxDQUFFLGlCQUFpQixFQUFFLFVBQVcsR0FBRyxFQUFFLEdBQUc7UUFDM0MsR0FBRyxDQUFDLFFBQVEsQ0FBRSxJQUFJLENBQUMsSUFBSSxDQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFFLENBQUUsQ0FBQTtJQUN2RCxDQUFDLENBQUUsQ0FBQTtJQUVILEdBQUcsQ0FBQyxHQUFHLENBQUUsWUFBWSxFQUFFLFVBQVcsR0FBRyxFQUFFLEdBQUc7UUFDdEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBRSxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBRSxDQUFBO1FBQzVFLEVBQUUsQ0FBQyxRQUFRLENBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxVQUFXLEdBQUcsRUFBRSxJQUFJO1lBQ2xELEVBQUUsQ0FBQyxDQUFFLEdBQUksQ0FBQztnQkFBQyxHQUFHLENBQUMsSUFBSSxDQUFFLEdBQUcsQ0FBRSxDQUFBO1lBQzFCLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxlQUFlLENBQUUsSUFBSSxFQUFFO2dCQUM3QyxlQUFlLEVBQUU7b0JBQ2IsTUFBTSxFQUFFLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTTtvQkFDcEMsYUFBYSxFQUFFLElBQUk7b0JBQ25CLGVBQWUsRUFBRSxJQUFJO2lCQUN4QjtnQkFDRCxRQUFRLEVBQUUsV0FBVzthQUN4QixDQUFFLENBQUE7WUFDSCxHQUFHLENBQUMsTUFBTSxDQUFFLEVBQUUsY0FBYyxFQUFFLHdCQUF3QixFQUFFLENBQUUsQ0FBQTtZQUUxRCxNQUFNLFVBQVUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUUsR0FBRyxDQUFFLENBQUMsR0FBRyxDQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFFLENBQUMsQ0FBRSxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUUsQ0FBQyxDQUFFLENBQUUsQ0FBQyxJQUFJLENBQUUsRUFBRSxDQUFFLENBQUE7WUFDakcsTUFBTSxZQUFZLEdBQUcsbUNBQW1DLENBQUE7WUFFeEQsR0FBRyxDQUFDLElBQUksQ0FBRSxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBRSxZQUFZLEVBQUUsVUFBVyxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUU7Z0JBQ3ZFLE1BQU0sQ0FBQyxTQUFTLEVBQUUsTUFBTSxVQUFVLENBQUUsRUFBRSxDQUFFLEVBQUUsQ0FBQTtZQUM5QyxDQUFDLENBQUUsQ0FBRSxDQUFBO1FBRVQsQ0FBQyxDQUFFLENBQUE7SUFDUCxDQUFDLENBQUUsQ0FBQTtJQUVILEdBQUcsQ0FBQyxHQUFHLENBQUUsV0FBVyxFQUFFLFVBQVcsR0FBRyxFQUFFLEdBQUc7UUFDckMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBRSxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFFLENBQUE7UUFDcEUsTUFBTSxDQUFDLE1BQU0sQ0FBRTtZQUNYLElBQUksRUFBRSxFQUFFO1lBQ1IsS0FBSyxFQUFFLFdBQVc7WUFDbEIsTUFBTSxFQUFFLEVBQUU7U0FDYixDQUFFLENBQUMsSUFBSSxDQUFFLFVBQVcsR0FBRztZQUNwQixHQUFHLENBQUMsTUFBTSxDQUFFLEVBQUUsY0FBYyxFQUFFLFVBQVUsRUFBRSxDQUFFLENBQUE7WUFDNUMsR0FBRyxDQUFDLElBQUksQ0FBRSxHQUFHLENBQUUsQ0FBQTtRQUNuQixDQUFDLENBQUUsQ0FBQTtJQUNQLENBQUMsQ0FBRSxDQUFBO0lBRUgsR0FBRyxDQUFDLEdBQUcsQ0FBRSxPQUFPLENBQUMsTUFBTSxDQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUUsQ0FBRSxDQUFBO0lBRXhDLEdBQUcsQ0FBQyxNQUFNLENBQUUsTUFBTSxDQUFDLElBQUksRUFBRTtRQUNyQixPQUFPLENBQUMsR0FBRyxDQUFFLG9CQUFxQixNQUFNLENBQUMsSUFBSyxFQUFFLENBQUUsQ0FBQTtJQUN0RCxDQUFDLENBQUUsQ0FBQTtBQUNQLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIlxuaW1wb3J0ICogYXMgVHlwZXNjcmlwdCBmcm9tIFwidHlwZXNjcmlwdFwiXG5pbXBvcnQgKiBhcyBGUyBmcm9tIFwiZnMtZXh0cmFcIlxuaW1wb3J0ICogYXMgUGF0aCBmcm9tIFwicGF0aFwiXG5cbmltcG9ydCAqIGFzIFRlbXBsYXRlcyBmcm9tIFwiLi9UZW1wbGF0ZXNcIlxuaW1wb3J0ICogYXMgU3R5bGVzIGZyb20gXCIuL1N0eWxlc1wiXG5cbmNvbnN0IGNyZWF0ZVBhdGhGcm9tUm9vdCA9IHJvb3QgPT4gZnVuY3Rpb24gKCBiYXNlX25hbWU6IHN0cmluZyApIHtcbiAgICByZXR1cm4gUGF0aC5qb2luKCBwcm9jZXNzLmN3ZCgpLCByb290LCBiYXNlX25hbWUgKVxufVxuXG5leHBvcnQgY29uc3QgcnVuID0gZnVuY3Rpb24gKCBjb25maWcgKSB7XG5cbiAgICBjb25zdCBhcHAgPSBFeHByZXNzKClcbiAgICBjb25zdCBwYXRoRnJvbVJvb3QgPSBjcmVhdGVQYXRoRnJvbVJvb3QoIGNvbmZpZy5yb290IClcblxuICAgIGFwcC5nZXQoIFwiLzptb2R1bGVfbmFtZS5odG1sXCIsIGZ1bmN0aW9uICggcmVxLCByZXMgKSB7XG4gICAgICAgIGNvbnN0IG1vZHVsZV9uYW1lID0gcmVxLnBhcmFtcy5tb2R1bGVfbmFtZVxuICAgICAgICBjb25zdCBtb2R1bGVfY29uZmlnX3BhdGggPSBwYXRoRnJvbVJvb3QoIGAkeyBtb2R1bGVfbmFtZSB9Lmpzb25gIClcblxuICAgICAgICByZXMuaGVhZGVyKCBcImNvbnRlbnQtdHlwZVwiLCBcInRleHQvaHRtbFwiIClcblxuICAgICAgICBGUy5yZWFkRmlsZSggbW9kdWxlX2NvbmZpZ19wYXRoLCBcInV0ZjhcIiApXG4gICAgICAgICAgICAudGhlbiggcmF3X2NvbmZpZyA9PiBKU09OLnBhcnNlKCByYXdfY29uZmlnICkgKVxuICAgICAgICAgICAgLnRoZW4oIGNvbmZpZyA9PiBPYmplY3QuYXNzaWduKCB7fSwgY29uZmlnLCB7IGRldjogdHJ1ZSB9ICkgKVxuICAgICAgICAgICAgLnRoZW4oIFRlbXBsYXRlcy5yZW5kZXIgKVxuICAgICAgICAgICAgLnRoZW4oIHRlbXBsYXRlID0+IHJlcy5zZW5kKCB0ZW1wbGF0ZSApIClcbiAgICB9IClcblxuICAgIGFwcC5nZXQoIFwiL25vZGVfbW9kdWxlcy8qXCIsIGZ1bmN0aW9uICggcmVxLCByZXMgKSB7XG4gICAgICAgIHJlcy5zZW5kRmlsZSggUGF0aC5qb2luKCBwcm9jZXNzLmN3ZCgpLCByZXEudXJsICkgKVxuICAgIH0gKVxuXG4gICAgYXBwLmdldCggXCIvc2NyaXB0cy8qXCIsIGZ1bmN0aW9uICggcmVxLCByZXMgKSB7XG4gICAgICAgIGNvbnN0IHNvdXJjZV9maWxlID0gUGF0aC5qb2luKCBwcm9jZXNzLmN3ZCgpLCBjb25maWcucm9vdCwgcmVxLnVybCArIFwiLnRzXCIgKVxuICAgICAgICBGUy5yZWFkRmlsZSggc291cmNlX2ZpbGUsIFwidXRmOFwiLCBmdW5jdGlvbiAoIGVyciwgZmlsZSApIHtcbiAgICAgICAgICAgIGlmICggZXJyICkgcmVzLnNlbmQoIGVyciApXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBUeXBlc2NyaXB0LnRyYW5zcGlsZU1vZHVsZSggZmlsZSwge1xuICAgICAgICAgICAgICAgIGNvbXBpbGVyT3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICBtb2R1bGU6IFR5cGVzY3JpcHQuTW9kdWxlS2luZC5FUzIwMTUsXG4gICAgICAgICAgICAgICAgICAgIGlubGluZVNvdXJjZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGlubGluZVNvdXJjZU1hcDogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZmlsZU5hbWU6IHNvdXJjZV9maWxlXG4gICAgICAgICAgICB9IClcbiAgICAgICAgICAgIHJlcy5oZWFkZXIoIHsgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qYXZhc2NyaXB0XCIgfSApXG5cbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZUNhc2UgPSBzID0+IHMuc3BsaXQoIFwiLVwiICkubWFwKCB3ID0+IHdbIDAgXS50b1VwcGVyQ2FzZSgpICsgdy5zbGljZSggMSApICkuam9pbiggXCJcIiApXG4gICAgICAgICAgICBjb25zdCBpbXBvcnRfcmVnZXggPSAvaW1wb3J0ICguKikgZnJvbSBcIihbYS16QS1aXFwtXSopXCIvZ1xuXG4gICAgICAgICAgICByZXMuc2VuZCggcmVzdWx0Lm91dHB1dFRleHQucmVwbGFjZSggaW1wb3J0X3JlZ2V4LCBmdW5jdGlvbiAoIG1hdGNoLCBwMSwgcDIgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBjb25zdCAke3AxfSA9ICR7Y2hhbmdlQ2FzZSggcDIgKX1gXG4gICAgICAgICAgICB9ICkgKVxuXG4gICAgICAgIH0gKVxuICAgIH0gKVxuXG4gICAgYXBwLmdldCggXCIvc3R5bGVzLypcIiwgZnVuY3Rpb24gKCByZXEsIHJlcyApIHtcbiAgICAgICAgY29uc3Qgc291cmNlX2ZpbGUgPSBQYXRoLmpvaW4oIHByb2Nlc3MuY3dkKCksIGNvbmZpZy5yb290LCByZXEudXJsIClcbiAgICAgICAgU3R5bGVzLnN0cmVhbSgge1xuICAgICAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgICAgIGlucHV0OiBzb3VyY2VfZmlsZSxcbiAgICAgICAgICAgIG91dHB1dDogXCJcIlxuICAgICAgICB9ICkudGhlbiggZnVuY3Rpb24gKCBjc3MgKSB7XG4gICAgICAgICAgICByZXMuaGVhZGVyKCB7IFwiY29udGVudC10eXBlXCI6IFwidGV4dC9jc3NcIiB9IClcbiAgICAgICAgICAgIHJlcy5zZW5kKCBjc3MgKVxuICAgICAgICB9IClcbiAgICB9IClcblxuICAgIGFwcC51c2UoIEV4cHJlc3Muc3RhdGljKCBjb25maWcucm9vdCApIClcblxuICAgIGFwcC5saXN0ZW4oIGNvbmZpZy5wb3J0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCBgc2VydmVyIHJ1bm5pbmcgQCAkeyBjb25maWcucG9ydCB9YCApXG4gICAgfSApXG59XG4iXX0=