"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Typescript = require("typescript");
const Path = require("path");
const Glob = require("globby");
const Rollup = require("rollup");
const RollupUglify = require("rollup-plugin-uglify");
exports.compile = function (modules) {
    const compile_options = {
        noEmitOnError: true,
        noImplicitAny: false,
        target: Typescript.ScriptTarget.ES2015,
        module: Typescript.ModuleKind.ES2015,
        moduleResolution: Typescript.ModuleResolutionKind.NodeJs,
        inlineSourceMap: true,
        inlineSources: true,
    };
    const module_scripts = modules.map(m => m.script);
    const program = Typescript.createProgram(module_scripts, compile_options);
    return new Promise(function (resolve, reject) {
        const emitResult = program.emit();
        const allDiagnostics = Typescript.getPreEmitDiagnostics(program)
            .concat(emitResult.diagnostics);
        const results = allDiagnostics.map(function (diagnostic) {
            if (diagnostic.file) {
                let { line, character } = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);
                let message = Typescript.flattenDiagnosticMessageText(diagnostic.messageText, '\n');
                return `${diagnostic.file.fileName} (${line + 1},${character + 1}): ${message}`;
            }
            else {
                return `${Typescript.flattenDiagnosticMessageText(diagnostic.messageText, '\n')}`;
            }
        });
        results.length > 0 ? reject(results) : resolve(modules);
    });
};
exports.bundle = function (modules) {
    return Promise.all(modules.map(function (module) {
        const rollup_input_options = {
            input: module.script,
            onwarn: function (warning) {
            },
            plugins: [
                RollupUglify()
            ]
        };
        const rollup_output_options = {
            file: module.bundle,
            format: "iife",
            name: module.name,
            globals: {}
        };
        return Rollup.rollup(rollup_input_options)
            .then(bundle => bundle.write(rollup_output_options));
    })).then(() => modules);
};
exports.detect = function (source, target) {
    const html_files_pattern = Path.join(source, "**", "*.html");
    return Glob(html_files_pattern).then(files => files.map(function (f) {
        const name = Path.basename(f, ".html");
        const script = Path.join(source, "scripts", name + ".ts");
        const bundle = Path.join(target, "scripts", name + ".js");
        return { name, script, bundle };
    }));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2NyaXB0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlNjcmlwdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5Q0FBd0M7QUFDeEMsNkJBQTRCO0FBRTVCLCtCQUE4QjtBQUM5QixpQ0FBZ0M7QUFDaEMscURBQW9EO0FBUXZDLFFBQUEsT0FBTyxHQUFHLFVBQVcsT0FBaUI7SUFDL0MsTUFBTSxlQUFlLEdBQUc7UUFDcEIsYUFBYSxFQUFFLElBQUk7UUFDbkIsYUFBYSxFQUFFLEtBQUs7UUFDcEIsTUFBTSxFQUFFLFVBQVUsQ0FBQyxZQUFZLENBQUMsTUFBTTtRQUN0QyxNQUFNLEVBQUUsVUFBVSxDQUFDLFVBQVUsQ0FBQyxNQUFNO1FBQ3BDLGdCQUFnQixFQUFFLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNO1FBQ3hELGVBQWUsRUFBRSxJQUFJO1FBQ3JCLGFBQWEsRUFBRSxJQUFJO0tBQ3RCLENBQUE7SUFFRCxNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBRSxDQUFBO0lBRW5ELE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxhQUFhLENBQUUsY0FBYyxFQUFFLGVBQWUsQ0FBRSxDQUFBO0lBRTNFLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBRSxVQUFXLE9BQU8sRUFBRSxNQUFNO1FBQzFDLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUVqQyxNQUFNLGNBQWMsR0FBRyxVQUFVLENBQUMscUJBQXFCLENBQUUsT0FBTyxDQUFFO2FBQzdELE1BQU0sQ0FBRSxVQUFVLENBQUMsV0FBVyxDQUFFLENBQUE7UUFFckMsTUFBTSxPQUFPLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBRSxVQUFXLFVBQVU7WUFDckQsRUFBRSxDQUFDLENBQUUsVUFBVSxDQUFDLElBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ3BCLElBQUksRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEdBQ25CLFVBQVUsQ0FBQyxJQUFJLENBQUMsNkJBQTZCLENBQUUsVUFBVSxDQUFDLEtBQUssQ0FBRSxDQUFBO2dCQUVyRSxJQUFJLE9BQU8sR0FDUCxVQUFVLENBQUMsNEJBQTRCLENBQUUsVUFBVSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUUsQ0FBQTtnQkFFM0UsTUFBTSxDQUFDLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUssSUFBSSxHQUFHLENBQUMsSUFBSSxTQUFTLEdBQUcsQ0FBQyxNQUFNLE9BQU8sRUFBRSxDQUFBO1lBQ25GLENBQUM7WUFDRCxJQUFJLENBQUMsQ0FBQztnQkFDRixNQUFNLENBQUMsR0FBRyxVQUFVLENBQUMsNEJBQTRCLENBQUUsVUFBVSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUUsRUFBRSxDQUFBO1lBQ3ZGLENBQUM7UUFDTCxDQUFDLENBQUUsQ0FBQTtRQUVILE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUUsT0FBTyxDQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBRSxPQUFPLENBQUUsQ0FBQTtJQUMvRCxDQUFDLENBQUUsQ0FBQTtBQUNQLENBQUMsQ0FBQTtBQUVZLFFBQUEsTUFBTSxHQUFHLFVBQVcsT0FBaUI7SUFDOUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBRSxVQUFXLE1BQU07UUFDOUMsTUFBTSxvQkFBb0IsR0FBd0I7WUFDOUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxNQUFNO1lBQ3BCLE1BQU0sRUFBRSxVQUFXLE9BQU87WUFDMUIsQ0FBQztZQUNELE9BQU8sRUFBRTtnQkFDTCxZQUFZLEVBQUU7YUFDakI7U0FDSixDQUFBO1FBRUQsTUFBTSxxQkFBcUIsR0FBeUI7WUFDaEQsSUFBSSxFQUFFLE1BQU0sQ0FBQyxNQUFNO1lBQ25CLE1BQU0sRUFBRSxNQUFNO1lBQ2QsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO1lBQ2pCLE9BQU8sRUFBRSxFQUFFO1NBQ2QsQ0FBQTtRQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFFLG9CQUFvQixDQUFFO2FBQ3ZDLElBQUksQ0FBRSxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUUscUJBQXFCLENBQUUsQ0FBRSxDQUFBO0lBRWhFLENBQUMsQ0FBRSxDQUFFLENBQUMsSUFBSSxDQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBRSxDQUFBO0FBQy9CLENBQUMsQ0FBQTtBQUVZLFFBQUEsTUFBTSxHQUFHLFVBQVcsTUFBYyxFQUFFLE1BQWM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFFLENBQUE7SUFFOUQsTUFBTSxDQUFDLElBQUksQ0FBRSxrQkFBa0IsQ0FBRSxDQUFDLElBQUksQ0FBRSxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUUsVUFBVyxDQUFDO1FBQ3BFLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBRSxDQUFBO1FBQ3hDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxJQUFJLEdBQUcsS0FBSyxDQUFFLENBQUE7UUFDM0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLElBQUksR0FBRyxLQUFLLENBQUUsQ0FBQTtRQUMzRCxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFBO0lBQ25DLENBQUMsQ0FBRSxDQUFFLENBQUE7QUFDVCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBUeXBlc2NyaXB0IGZyb20gXCJ0eXBlc2NyaXB0XCJcbmltcG9ydCAqIGFzIFBhdGggZnJvbSBcInBhdGhcIlxuaW1wb3J0ICogYXMgRlMgZnJvbSBcImZzLWV4dHJhXCJcbmltcG9ydCAqIGFzIEdsb2IgZnJvbSBcImdsb2JieVwiXG5pbXBvcnQgKiBhcyBSb2xsdXAgZnJvbSBcInJvbGx1cFwiXG5pbXBvcnQgKiBhcyBSb2xsdXBVZ2xpZnkgZnJvbSBcInJvbGx1cC1wbHVnaW4tdWdsaWZ5XCJcblxuZXhwb3J0IHR5cGUgU2NyaXB0ID0ge1xuICAgIG5hbWU6IHN0cmluZyxcbiAgICBzY3JpcHQ6IHN0cmluZyxcbiAgICBidW5kbGU6IHN0cmluZ1xufVxuXG5leHBvcnQgY29uc3QgY29tcGlsZSA9IGZ1bmN0aW9uICggbW9kdWxlczogU2NyaXB0W10gKSB7XG4gICAgY29uc3QgY29tcGlsZV9vcHRpb25zID0ge1xuICAgICAgICBub0VtaXRPbkVycm9yOiB0cnVlLFxuICAgICAgICBub0ltcGxpY2l0QW55OiBmYWxzZSxcbiAgICAgICAgdGFyZ2V0OiBUeXBlc2NyaXB0LlNjcmlwdFRhcmdldC5FUzIwMTUsXG4gICAgICAgIG1vZHVsZTogVHlwZXNjcmlwdC5Nb2R1bGVLaW5kLkVTMjAxNSxcbiAgICAgICAgbW9kdWxlUmVzb2x1dGlvbjogVHlwZXNjcmlwdC5Nb2R1bGVSZXNvbHV0aW9uS2luZC5Ob2RlSnMsXG4gICAgICAgIGlubGluZVNvdXJjZU1hcDogdHJ1ZSxcbiAgICAgICAgaW5saW5lU291cmNlczogdHJ1ZSxcbiAgICB9XG5cbiAgICBjb25zdCBtb2R1bGVfc2NyaXB0cyA9IG1vZHVsZXMubWFwKCBtID0+IG0uc2NyaXB0IClcblxuICAgIGNvbnN0IHByb2dyYW0gPSBUeXBlc2NyaXB0LmNyZWF0ZVByb2dyYW0oIG1vZHVsZV9zY3JpcHRzLCBjb21waWxlX29wdGlvbnMgKVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKCBmdW5jdGlvbiAoIHJlc29sdmUsIHJlamVjdCApIHtcbiAgICAgICAgY29uc3QgZW1pdFJlc3VsdCA9IHByb2dyYW0uZW1pdCgpXG5cbiAgICAgICAgY29uc3QgYWxsRGlhZ25vc3RpY3MgPSBUeXBlc2NyaXB0LmdldFByZUVtaXREaWFnbm9zdGljcyggcHJvZ3JhbSApXG4gICAgICAgICAgICAuY29uY2F0KCBlbWl0UmVzdWx0LmRpYWdub3N0aWNzIClcblxuICAgICAgICBjb25zdCByZXN1bHRzID0gYWxsRGlhZ25vc3RpY3MubWFwKCBmdW5jdGlvbiAoIGRpYWdub3N0aWMgKSB7XG4gICAgICAgICAgICBpZiAoIGRpYWdub3N0aWMuZmlsZSApIHtcbiAgICAgICAgICAgICAgICBsZXQgeyBsaW5lLCBjaGFyYWN0ZXIgfSA9XG4gICAgICAgICAgICAgICAgICAgIGRpYWdub3N0aWMuZmlsZS5nZXRMaW5lQW5kQ2hhcmFjdGVyT2ZQb3NpdGlvbiggZGlhZ25vc3RpYy5zdGFydCApXG5cbiAgICAgICAgICAgICAgICBsZXQgbWVzc2FnZSA9XG4gICAgICAgICAgICAgICAgICAgIFR5cGVzY3JpcHQuZmxhdHRlbkRpYWdub3N0aWNNZXNzYWdlVGV4dCggZGlhZ25vc3RpYy5tZXNzYWdlVGV4dCwgJ1xcbicgKVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke2RpYWdub3N0aWMuZmlsZS5maWxlTmFtZX0gKCR7bGluZSArIDF9LCR7Y2hhcmFjdGVyICsgMX0pOiAke21lc3NhZ2V9YFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke1R5cGVzY3JpcHQuZmxhdHRlbkRpYWdub3N0aWNNZXNzYWdlVGV4dCggZGlhZ25vc3RpYy5tZXNzYWdlVGV4dCwgJ1xcbicgKX1gXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gKVxuXG4gICAgICAgIHJlc3VsdHMubGVuZ3RoID4gMCA/IHJlamVjdCggcmVzdWx0cyApIDogcmVzb2x2ZSggbW9kdWxlcyApXG4gICAgfSApXG59XG5cbmV4cG9ydCBjb25zdCBidW5kbGUgPSBmdW5jdGlvbiAoIG1vZHVsZXM6IFNjcmlwdFtdICkge1xuICAgIHJldHVybiBQcm9taXNlLmFsbCggbW9kdWxlcy5tYXAoIGZ1bmN0aW9uICggbW9kdWxlICkge1xuICAgICAgICBjb25zdCByb2xsdXBfaW5wdXRfb3B0aW9uczogUm9sbHVwLklucHV0T3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGlucHV0OiBtb2R1bGUuc2NyaXB0LFxuICAgICAgICAgICAgb253YXJuOiBmdW5jdGlvbiAoIHdhcm5pbmcgKSB7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGx1Z2luczogW1xuICAgICAgICAgICAgICAgIFJvbGx1cFVnbGlmeSgpXG4gICAgICAgICAgICBdXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByb2xsdXBfb3V0cHV0X29wdGlvbnM6IFJvbGx1cC5PdXRwdXRPcHRpb25zID0ge1xuICAgICAgICAgICAgZmlsZTogbW9kdWxlLmJ1bmRsZSxcbiAgICAgICAgICAgIGZvcm1hdDogXCJpaWZlXCIsXG4gICAgICAgICAgICBuYW1lOiBtb2R1bGUubmFtZSxcbiAgICAgICAgICAgIGdsb2JhbHM6IHt9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUm9sbHVwLnJvbGx1cCggcm9sbHVwX2lucHV0X29wdGlvbnMgKVxuICAgICAgICAgICAgLnRoZW4oIGJ1bmRsZSA9PiBidW5kbGUud3JpdGUoIHJvbGx1cF9vdXRwdXRfb3B0aW9ucyApIClcblxuICAgIH0gKSApLnRoZW4oICgpID0+IG1vZHVsZXMgKVxufVxuXG5leHBvcnQgY29uc3QgZGV0ZWN0ID0gZnVuY3Rpb24gKCBzb3VyY2U6IHN0cmluZywgdGFyZ2V0OiBzdHJpbmcgKSB7XG4gICAgY29uc3QgaHRtbF9maWxlc19wYXR0ZXJuID0gUGF0aC5qb2luKCBzb3VyY2UsIFwiKipcIiwgXCIqLmh0bWxcIiApXG5cbiAgICByZXR1cm4gR2xvYiggaHRtbF9maWxlc19wYXR0ZXJuICkudGhlbiggZmlsZXMgPT4gZmlsZXMubWFwKCBmdW5jdGlvbiAoIGYgKSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBQYXRoLmJhc2VuYW1lKCBmLCBcIi5odG1sXCIgKVxuICAgICAgICBjb25zdCBzY3JpcHQgPSBQYXRoLmpvaW4oIHNvdXJjZSwgXCJzY3JpcHRzXCIsIG5hbWUgKyBcIi50c1wiIClcbiAgICAgICAgY29uc3QgYnVuZGxlID0gUGF0aC5qb2luKCB0YXJnZXQsIFwic2NyaXB0c1wiLCBuYW1lICsgXCIuanNcIiApXG4gICAgICAgIHJldHVybiB7IG5hbWUsIHNjcmlwdCwgYnVuZGxlIH1cbiAgICB9ICkgKVxufVxuIl19