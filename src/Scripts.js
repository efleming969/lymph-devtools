"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Typescript = require("typescript");
const Path = require("path");
const Glob = require("globby");
const Rollup = require("rollup");
const RollupUglify = require("rollup-plugin-uglify");
exports.compile = function (modules) {
    const compile_options = {
        noEmitOnError: true,
        noImplicitAny: false,
        target: Typescript.ScriptTarget.ES2015,
        module: Typescript.ModuleKind.ES2015,
        moduleResolution: Typescript.ModuleResolutionKind.NodeJs,
        inlineSourceMap: true,
        inlineSources: true,
    };
    const module_scripts = modules.map(m => m.script);
    const program = Typescript.createProgram(module_scripts, compile_options);
    return new Promise(function (resolve, reject) {
        const emitResult = program.emit();
        const allDiagnostics = Typescript.getPreEmitDiagnostics(program)
            .concat(emitResult.diagnostics);
        const results = allDiagnostics.map(function (diagnostic) {
            if (diagnostic.file) {
                let { line, character } = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);
                let message = Typescript.flattenDiagnosticMessageText(diagnostic.messageText, '\n');
                return `${diagnostic.file.fileName} (${line + 1},${character + 1}): ${message}`;
            }
            else {
                return `${Typescript.flattenDiagnosticMessageText(diagnostic.messageText, '\n')}`;
            }
        });
        results.length > 0 ? reject(results) : resolve(modules);
    });
};
exports.bundle = function (modules) {
    return Promise.all(modules.map(function (module) {
        const rollup_input_options = {
            input: module.script,
            onwarn: function (warning) {
            },
            plugins: [
                RollupUglify()
            ]
        };
        const rollup_output_options = {
            file: module.bundle,
            format: "iife",
            name: module.name,
            globals: {}
        };
        return Rollup.rollup(rollup_input_options)
            .then(bundle => bundle.write(rollup_output_options));
    })).then(() => modules);
};
exports.detect = function (source, target) {
    const html_files_pattern = Path.join(source, "**", "*.html");
    return Glob(html_files_pattern).then(files => files.map(function (f) {
        const name = Path.basename(f, ".html");
        const script = Path.join(source, "scripts", name + ".ts");
        const bundle = Path.join(target, "scripts", name + ".js");
        return { name, script, bundle };
    }));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2NyaXB0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlNjcmlwdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5Q0FBd0M7QUFDeEMsNkJBQTRCO0FBQzVCLCtCQUE4QjtBQUM5QixpQ0FBZ0M7QUFDaEMscURBQW9EO0FBUXZDLFFBQUEsT0FBTyxHQUFHLFVBQVcsT0FBaUI7SUFDL0MsTUFBTSxlQUFlLEdBQUc7UUFDcEIsYUFBYSxFQUFFLElBQUk7UUFDbkIsYUFBYSxFQUFFLEtBQUs7UUFDcEIsTUFBTSxFQUFFLFVBQVUsQ0FBQyxZQUFZLENBQUMsTUFBTTtRQUN0QyxNQUFNLEVBQUUsVUFBVSxDQUFDLFVBQVUsQ0FBQyxNQUFNO1FBQ3BDLGdCQUFnQixFQUFFLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNO1FBQ3hELGVBQWUsRUFBRSxJQUFJO1FBQ3JCLGFBQWEsRUFBRSxJQUFJO0tBQ3RCLENBQUE7SUFFRCxNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBRSxDQUFBO0lBRW5ELE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxhQUFhLENBQUUsY0FBYyxFQUFFLGVBQWUsQ0FBRSxDQUFBO0lBRTNFLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBRSxVQUFXLE9BQU8sRUFBRSxNQUFNO1FBQzFDLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUVqQyxNQUFNLGNBQWMsR0FBRyxVQUFVLENBQUMscUJBQXFCLENBQUUsT0FBTyxDQUFFO2FBQzdELE1BQU0sQ0FBRSxVQUFVLENBQUMsV0FBVyxDQUFFLENBQUE7UUFFckMsTUFBTSxPQUFPLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBRSxVQUFXLFVBQVU7WUFDckQsRUFBRSxDQUFDLENBQUUsVUFBVSxDQUFDLElBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ3BCLElBQUksRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEdBQ25CLFVBQVUsQ0FBQyxJQUFJLENBQUMsNkJBQTZCLENBQUUsVUFBVSxDQUFDLEtBQUssQ0FBRSxDQUFBO2dCQUVyRSxJQUFJLE9BQU8sR0FDUCxVQUFVLENBQUMsNEJBQTRCLENBQUUsVUFBVSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUUsQ0FBQTtnQkFFM0UsTUFBTSxDQUFDLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUssSUFBSSxHQUFHLENBQUMsSUFBSSxTQUFTLEdBQUcsQ0FBQyxNQUFNLE9BQU8sRUFBRSxDQUFBO1lBQ25GLENBQUM7WUFDRCxJQUFJLENBQUMsQ0FBQztnQkFDRixNQUFNLENBQUMsR0FBRyxVQUFVLENBQUMsNEJBQTRCLENBQUUsVUFBVSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUUsRUFBRSxDQUFBO1lBQ3ZGLENBQUM7UUFDTCxDQUFDLENBQUUsQ0FBQTtRQUVILE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUUsT0FBTyxDQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBRSxPQUFPLENBQUUsQ0FBQTtJQUMvRCxDQUFDLENBQUUsQ0FBQTtBQUNQLENBQUMsQ0FBQTtBQUVZLFFBQUEsTUFBTSxHQUFHLFVBQVcsT0FBaUI7SUFDOUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBRSxVQUFXLE1BQU07UUFDOUMsTUFBTSxvQkFBb0IsR0FBd0I7WUFDOUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxNQUFNO1lBQ3BCLE1BQU0sRUFBRSxVQUFXLE9BQU87WUFDMUIsQ0FBQztZQUNELE9BQU8sRUFBRTtnQkFDTCxZQUFZLEVBQUU7YUFDakI7U0FDSixDQUFBO1FBRUQsTUFBTSxxQkFBcUIsR0FBeUI7WUFDaEQsSUFBSSxFQUFFLE1BQU0sQ0FBQyxNQUFNO1lBQ25CLE1BQU0sRUFBRSxNQUFNO1lBQ2QsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO1lBQ2pCLE9BQU8sRUFBRSxFQUFFO1NBQ2QsQ0FBQTtRQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFFLG9CQUFvQixDQUFFO2FBQ3ZDLElBQUksQ0FBRSxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUUscUJBQXFCLENBQUUsQ0FBRSxDQUFBO0lBRWhFLENBQUMsQ0FBRSxDQUFFLENBQUMsSUFBSSxDQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBRSxDQUFBO0FBQy9CLENBQUMsQ0FBQTtBQUVZLFFBQUEsTUFBTSxHQUFHLFVBQVcsTUFBYyxFQUFFLE1BQWM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFFLENBQUE7SUFFOUQsTUFBTSxDQUFDLElBQUksQ0FBRSxrQkFBa0IsQ0FBRSxDQUFDLElBQUksQ0FBRSxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUUsVUFBVyxDQUFDO1FBQ3BFLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBRSxDQUFBO1FBQ3hDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxJQUFJLEdBQUcsS0FBSyxDQUFFLENBQUE7UUFDM0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLElBQUksR0FBRyxLQUFLLENBQUUsQ0FBQTtRQUMzRCxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFBO0lBQ25DLENBQUMsQ0FBRSxDQUFFLENBQUE7QUFDVCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBUeXBlc2NyaXB0IGZyb20gXCJ0eXBlc2NyaXB0XCJcbmltcG9ydCAqIGFzIFBhdGggZnJvbSBcInBhdGhcIlxuaW1wb3J0ICogYXMgR2xvYiBmcm9tIFwiZ2xvYmJ5XCJcbmltcG9ydCAqIGFzIFJvbGx1cCBmcm9tIFwicm9sbHVwXCJcbmltcG9ydCAqIGFzIFJvbGx1cFVnbGlmeSBmcm9tIFwicm9sbHVwLXBsdWdpbi11Z2xpZnlcIlxuXG5leHBvcnQgdHlwZSBTY3JpcHQgPSB7XG4gICAgbmFtZTogc3RyaW5nLFxuICAgIHNjcmlwdDogc3RyaW5nLFxuICAgIGJ1bmRsZTogc3RyaW5nXG59XG5cbmV4cG9ydCBjb25zdCBjb21waWxlID0gZnVuY3Rpb24gKCBtb2R1bGVzOiBTY3JpcHRbXSApIHtcbiAgICBjb25zdCBjb21waWxlX29wdGlvbnMgPSB7XG4gICAgICAgIG5vRW1pdE9uRXJyb3I6IHRydWUsXG4gICAgICAgIG5vSW1wbGljaXRBbnk6IGZhbHNlLFxuICAgICAgICB0YXJnZXQ6IFR5cGVzY3JpcHQuU2NyaXB0VGFyZ2V0LkVTMjAxNSxcbiAgICAgICAgbW9kdWxlOiBUeXBlc2NyaXB0Lk1vZHVsZUtpbmQuRVMyMDE1LFxuICAgICAgICBtb2R1bGVSZXNvbHV0aW9uOiBUeXBlc2NyaXB0Lk1vZHVsZVJlc29sdXRpb25LaW5kLk5vZGVKcyxcbiAgICAgICAgaW5saW5lU291cmNlTWFwOiB0cnVlLFxuICAgICAgICBpbmxpbmVTb3VyY2VzOiB0cnVlLFxuICAgIH1cblxuICAgIGNvbnN0IG1vZHVsZV9zY3JpcHRzID0gbW9kdWxlcy5tYXAoIG0gPT4gbS5zY3JpcHQgKVxuXG4gICAgY29uc3QgcHJvZ3JhbSA9IFR5cGVzY3JpcHQuY3JlYXRlUHJvZ3JhbSggbW9kdWxlX3NjcmlwdHMsIGNvbXBpbGVfb3B0aW9ucyApXG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoIGZ1bmN0aW9uICggcmVzb2x2ZSwgcmVqZWN0ICkge1xuICAgICAgICBjb25zdCBlbWl0UmVzdWx0ID0gcHJvZ3JhbS5lbWl0KClcblxuICAgICAgICBjb25zdCBhbGxEaWFnbm9zdGljcyA9IFR5cGVzY3JpcHQuZ2V0UHJlRW1pdERpYWdub3N0aWNzKCBwcm9ncmFtIClcbiAgICAgICAgICAgIC5jb25jYXQoIGVtaXRSZXN1bHQuZGlhZ25vc3RpY3MgKVxuXG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSBhbGxEaWFnbm9zdGljcy5tYXAoIGZ1bmN0aW9uICggZGlhZ25vc3RpYyApIHtcbiAgICAgICAgICAgIGlmICggZGlhZ25vc3RpYy5maWxlICkge1xuICAgICAgICAgICAgICAgIGxldCB7IGxpbmUsIGNoYXJhY3RlciB9ID1cbiAgICAgICAgICAgICAgICAgICAgZGlhZ25vc3RpYy5maWxlLmdldExpbmVBbmRDaGFyYWN0ZXJPZlBvc2l0aW9uKCBkaWFnbm9zdGljLnN0YXJ0IClcblxuICAgICAgICAgICAgICAgIGxldCBtZXNzYWdlID1cbiAgICAgICAgICAgICAgICAgICAgVHlwZXNjcmlwdC5mbGF0dGVuRGlhZ25vc3RpY01lc3NhZ2VUZXh0KCBkaWFnbm9zdGljLm1lc3NhZ2VUZXh0LCAnXFxuJyApXG5cbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7ZGlhZ25vc3RpYy5maWxlLmZpbGVOYW1lfSAoJHtsaW5lICsgMX0sJHtjaGFyYWN0ZXIgKyAxfSk6ICR7bWVzc2FnZX1gXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7VHlwZXNjcmlwdC5mbGF0dGVuRGlhZ25vc3RpY01lc3NhZ2VUZXh0KCBkaWFnbm9zdGljLm1lc3NhZ2VUZXh0LCAnXFxuJyApfWBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSApXG5cbiAgICAgICAgcmVzdWx0cy5sZW5ndGggPiAwID8gcmVqZWN0KCByZXN1bHRzICkgOiByZXNvbHZlKCBtb2R1bGVzIClcbiAgICB9IClcbn1cblxuZXhwb3J0IGNvbnN0IGJ1bmRsZSA9IGZ1bmN0aW9uICggbW9kdWxlczogU2NyaXB0W10gKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKCBtb2R1bGVzLm1hcCggZnVuY3Rpb24gKCBtb2R1bGUgKSB7XG4gICAgICAgIGNvbnN0IHJvbGx1cF9pbnB1dF9vcHRpb25zOiBSb2xsdXAuSW5wdXRPcHRpb25zID0ge1xuICAgICAgICAgICAgaW5wdXQ6IG1vZHVsZS5zY3JpcHQsXG4gICAgICAgICAgICBvbndhcm46IGZ1bmN0aW9uICggd2FybmluZyApIHtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwbHVnaW5zOiBbXG4gICAgICAgICAgICAgICAgUm9sbHVwVWdsaWZ5KClcbiAgICAgICAgICAgIF1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJvbGx1cF9vdXRwdXRfb3B0aW9uczogUm9sbHVwLk91dHB1dE9wdGlvbnMgPSB7XG4gICAgICAgICAgICBmaWxlOiBtb2R1bGUuYnVuZGxlLFxuICAgICAgICAgICAgZm9ybWF0OiBcImlpZmVcIixcbiAgICAgICAgICAgIG5hbWU6IG1vZHVsZS5uYW1lLFxuICAgICAgICAgICAgZ2xvYmFsczoge31cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBSb2xsdXAucm9sbHVwKCByb2xsdXBfaW5wdXRfb3B0aW9ucyApXG4gICAgICAgICAgICAudGhlbiggYnVuZGxlID0+IGJ1bmRsZS53cml0ZSggcm9sbHVwX291dHB1dF9vcHRpb25zICkgKVxuXG4gICAgfSApICkudGhlbiggKCkgPT4gbW9kdWxlcyApXG59XG5cbmV4cG9ydCBjb25zdCBkZXRlY3QgPSBmdW5jdGlvbiAoIHNvdXJjZTogc3RyaW5nLCB0YXJnZXQ6IHN0cmluZyApIHtcbiAgICBjb25zdCBodG1sX2ZpbGVzX3BhdHRlcm4gPSBQYXRoLmpvaW4oIHNvdXJjZSwgXCIqKlwiLCBcIiouaHRtbFwiIClcblxuICAgIHJldHVybiBHbG9iKCBodG1sX2ZpbGVzX3BhdHRlcm4gKS50aGVuKCBmaWxlcyA9PiBmaWxlcy5tYXAoIGZ1bmN0aW9uICggZiApIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IFBhdGguYmFzZW5hbWUoIGYsIFwiLmh0bWxcIiApXG4gICAgICAgIGNvbnN0IHNjcmlwdCA9IFBhdGguam9pbiggc291cmNlLCBcInNjcmlwdHNcIiwgbmFtZSArIFwiLnRzXCIgKVxuICAgICAgICBjb25zdCBidW5kbGUgPSBQYXRoLmpvaW4oIHRhcmdldCwgXCJzY3JpcHRzXCIsIG5hbWUgKyBcIi5qc1wiIClcbiAgICAgICAgcmV0dXJuIHsgbmFtZSwgc2NyaXB0LCBidW5kbGUgfVxuICAgIH0gKSApXG59XG4iXX0=