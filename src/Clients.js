"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const FS = require("fs-extra");
const Path = require("path");
const AWS = require("aws-sdk");
const Glob = require("globby");
const Mime = require("mime");
const Scripts = require("./Scripts");
const Styles = require("./Styles");
const Templates = require("./Templates");
const cwd = process.cwd();
exports.configure = function (source, target) {
    return Promise.resolve({ source, target });
};
const mapToPromises = fn => list => Promise.all(list.map(fn));
exports.buildTemplates = function (config) {
    return Templates.detect(config.source, config.target)
        .then(mapToPromises(Templates.compile))
        .then(() => config);
};
exports.buildScripts = function (config) {
    return Scripts.detect(config.source, config.target)
        .then(Scripts.compile)
        .then(Scripts.bundle)
        .then(() => config);
};
exports.buildStyles = function (config) {
    return Styles.detect(config.source, config.target)
        .then(Styles.compile)
        .then(() => config);
};
exports.buildStatics = function (config) {
    const source_dir = Path.join(config.source, "statics");
    const target_dir = Path.join(config.target, "statics");
    return FS.copy(source_dir, target_dir)
        .then(() => config);
};
exports.deploy = function (source, target, region) {
    const s3 = new AWS.S3({ region });
    return Glob(source).then(function (files) {
        return Promise.all(files.map(function (file) {
            return FS.readFile(file).then(function (buffer) {
                const put_config = {
                    Body: buffer,
                    Bucket: target,
                    Key: file.replace(source + "/", ""),
                    ContentType: Mime.getType(file)
                };
                return s3.putObject(put_config).promise();
            });
        }));
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xpZW50cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNsaWVudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBOEI7QUFDOUIsNkJBQTRCO0FBQzVCLCtCQUE4QjtBQUM5QiwrQkFBOEI7QUFDOUIsNkJBQTRCO0FBRTVCLHFDQUFvQztBQUNwQyxtQ0FBa0M7QUFDbEMseUNBQXdDO0FBRXhDLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQTtBQU9aLFFBQUEsU0FBUyxHQUFHLFVBQVcsTUFBYyxFQUFFLE1BQWM7SUFDOUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUUsQ0FBQTtBQUNoRCxDQUFDLENBQUE7QUFFRCxNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBRSxJQUFJLENBQUMsR0FBRyxDQUFFLEVBQUUsQ0FBRSxDQUFFLENBQUE7QUFFcEQsUUFBQSxjQUFjLEdBQUcsVUFBVyxNQUFjO0lBQ25ELE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBRTtTQUNsRCxJQUFJLENBQUUsYUFBYSxDQUFFLFNBQVMsQ0FBQyxPQUFPLENBQUUsQ0FBRTtTQUMxQyxJQUFJLENBQUUsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFFLENBQUE7QUFDN0IsQ0FBQyxDQUFBO0FBRVksUUFBQSxZQUFZLEdBQUcsVUFBVyxNQUFjO0lBQ2pELE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBRTtTQUNoRCxJQUFJLENBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBRTtTQUN2QixJQUFJLENBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBRTtTQUN0QixJQUFJLENBQUUsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFFLENBQUE7QUFDN0IsQ0FBQyxDQUFBO0FBRVksUUFBQSxXQUFXLEdBQUcsVUFBVyxNQUFjO0lBQ2hELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBRTtTQUMvQyxJQUFJLENBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBRTtTQUN0QixJQUFJLENBQUUsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFFLENBQUE7QUFDN0IsQ0FBQyxDQUFBO0FBRVksUUFBQSxZQUFZLEdBQUcsVUFBVyxNQUFjO0lBQ2pELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUUsQ0FBQTtJQUN4RCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFFLENBQUE7SUFFeEQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUUsVUFBVSxFQUFFLFVBQVUsQ0FBRTtTQUNuQyxJQUFJLENBQUUsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFFLENBQUE7QUFDN0IsQ0FBQyxDQUFBO0FBRVksUUFBQSxNQUFNLEdBQUcsVUFBVyxNQUFjLEVBQUUsTUFBYyxFQUFFLE1BQWM7SUFDM0UsTUFBTSxFQUFFLEdBQUcsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFFLEVBQUUsTUFBTSxFQUFFLENBQUUsQ0FBQTtJQUVuQyxNQUFNLENBQUMsSUFBSSxDQUFFLE1BQU0sQ0FBRSxDQUFDLElBQUksQ0FBRSxVQUFXLEtBQUs7UUFDeEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBRSxVQUFXLElBQUk7WUFDMUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUUsSUFBSSxDQUFFLENBQUMsSUFBSSxDQUFFLFVBQVcsTUFBTTtnQkFDOUMsTUFBTSxVQUFVLEdBQUc7b0JBQ2YsSUFBSSxFQUFFLE1BQU07b0JBQ1osTUFBTSxFQUFFLE1BQU07b0JBQ2QsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUUsTUFBTSxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUU7b0JBQ3JDLFdBQVcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFFLElBQUksQ0FBRTtpQkFDcEMsQ0FBQTtnQkFDRCxNQUFNLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBRSxVQUFVLENBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtZQUMvQyxDQUFDLENBQUUsQ0FBQTtRQUNQLENBQUMsQ0FBRSxDQUFFLENBQUE7SUFDVCxDQUFDLENBQUUsQ0FBQTtBQUNQLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEZTIGZyb20gXCJmcy1leHRyYVwiXG5pbXBvcnQgKiBhcyBQYXRoIGZyb20gXCJwYXRoXCJcbmltcG9ydCAqIGFzIEFXUyBmcm9tIFwiYXdzLXNka1wiXG5pbXBvcnQgKiBhcyBHbG9iIGZyb20gXCJnbG9iYnlcIlxuaW1wb3J0ICogYXMgTWltZSBmcm9tIFwibWltZVwiXG5cbmltcG9ydCAqIGFzIFNjcmlwdHMgZnJvbSBcIi4vU2NyaXB0c1wiXG5pbXBvcnQgKiBhcyBTdHlsZXMgZnJvbSBcIi4vU3R5bGVzXCJcbmltcG9ydCAqIGFzIFRlbXBsYXRlcyBmcm9tIFwiLi9UZW1wbGF0ZXNcIlxuXG5jb25zdCBjd2QgPSBwcm9jZXNzLmN3ZCgpXG5cbnR5cGUgQ29uZmlnID0ge1xuICAgIHNvdXJjZTogc3RyaW5nLFxuICAgIHRhcmdldDogc3RyaW5nXG59XG5cbmV4cG9ydCBjb25zdCBjb25maWd1cmUgPSBmdW5jdGlvbiAoIHNvdXJjZTogc3RyaW5nLCB0YXJnZXQ6IHN0cmluZyApIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCB7IHNvdXJjZSwgdGFyZ2V0IH0gKVxufVxuXG5jb25zdCBtYXBUb1Byb21pc2VzID0gZm4gPT4gbGlzdCA9PiBQcm9taXNlLmFsbCggbGlzdC5tYXAoIGZuICkgKVxuXG5leHBvcnQgY29uc3QgYnVpbGRUZW1wbGF0ZXMgPSBmdW5jdGlvbiAoIGNvbmZpZzogQ29uZmlnICkge1xuICAgIHJldHVybiBUZW1wbGF0ZXMuZGV0ZWN0KCBjb25maWcuc291cmNlLCBjb25maWcudGFyZ2V0IClcbiAgICAgICAgLnRoZW4oIG1hcFRvUHJvbWlzZXMoIFRlbXBsYXRlcy5jb21waWxlICkgKVxuICAgICAgICAudGhlbiggKCkgPT4gY29uZmlnIClcbn1cblxuZXhwb3J0IGNvbnN0IGJ1aWxkU2NyaXB0cyA9IGZ1bmN0aW9uICggY29uZmlnOiBDb25maWcgKSB7XG4gICAgcmV0dXJuIFNjcmlwdHMuZGV0ZWN0KCBjb25maWcuc291cmNlLCBjb25maWcudGFyZ2V0IClcbiAgICAgICAgLnRoZW4oIFNjcmlwdHMuY29tcGlsZSApXG4gICAgICAgIC50aGVuKCBTY3JpcHRzLmJ1bmRsZSApXG4gICAgICAgIC50aGVuKCAoKSA9PiBjb25maWcgKVxufVxuXG5leHBvcnQgY29uc3QgYnVpbGRTdHlsZXMgPSBmdW5jdGlvbiAoIGNvbmZpZzogQ29uZmlnICkge1xuICAgIHJldHVybiBTdHlsZXMuZGV0ZWN0KCBjb25maWcuc291cmNlLCBjb25maWcudGFyZ2V0IClcbiAgICAgICAgLnRoZW4oIFN0eWxlcy5jb21waWxlIClcbiAgICAgICAgLnRoZW4oICgpID0+IGNvbmZpZyApXG59XG5cbmV4cG9ydCBjb25zdCBidWlsZFN0YXRpY3MgPSBmdW5jdGlvbiAoIGNvbmZpZzogQ29uZmlnICkge1xuICAgIGNvbnN0IHNvdXJjZV9kaXIgPSBQYXRoLmpvaW4oIGNvbmZpZy5zb3VyY2UsIFwic3RhdGljc1wiIClcbiAgICBjb25zdCB0YXJnZXRfZGlyID0gUGF0aC5qb2luKCBjb25maWcudGFyZ2V0LCBcInN0YXRpY3NcIiApXG5cbiAgICByZXR1cm4gRlMuY29weSggc291cmNlX2RpciwgdGFyZ2V0X2RpciApXG4gICAgICAgIC50aGVuKCAoKSA9PiBjb25maWcgKVxufVxuXG5leHBvcnQgY29uc3QgZGVwbG95ID0gZnVuY3Rpb24gKCBzb3VyY2U6IHN0cmluZywgdGFyZ2V0OiBzdHJpbmcsIHJlZ2lvbjogc3RyaW5nICkge1xuICAgIGNvbnN0IHMzID0gbmV3IEFXUy5TMyggeyByZWdpb24gfSApXG5cbiAgICByZXR1cm4gR2xvYiggc291cmNlICkudGhlbiggZnVuY3Rpb24gKCBmaWxlcyApIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKCBmaWxlcy5tYXAoIGZ1bmN0aW9uICggZmlsZSApIHtcbiAgICAgICAgICAgIHJldHVybiBGUy5yZWFkRmlsZSggZmlsZSApLnRoZW4oIGZ1bmN0aW9uICggYnVmZmVyICkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHB1dF9jb25maWcgPSB7XG4gICAgICAgICAgICAgICAgICAgIEJvZHk6IGJ1ZmZlcixcbiAgICAgICAgICAgICAgICAgICAgQnVja2V0OiB0YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgIEtleTogZmlsZS5yZXBsYWNlKCBzb3VyY2UgKyBcIi9cIiwgXCJcIiApLFxuICAgICAgICAgICAgICAgICAgICBDb250ZW50VHlwZTogTWltZS5nZXRUeXBlKCBmaWxlIClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHMzLnB1dE9iamVjdCggcHV0X2NvbmZpZyApLnByb21pc2UoKVxuICAgICAgICAgICAgfSApXG4gICAgICAgIH0gKSApXG4gICAgfSApXG59XG4iXX0=