"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const FS = require("fs-extra");
const Path = require("path");
const AWS = require("aws-sdk");
const Glob = require("globby");
const Mime = require("mime");
const Scripts = require("./Scripts");
const Styles = require("./Styles");
const Templates = require("./Templates");
const cwd = process.cwd();
exports.configure = function (source, target) {
    return Promise.resolve({ source, target });
};
const mapToPromises = fn => list => Promise.all(list.map(fn));
exports.buildTemplates = function (config) {
    return Templates.detect(config.source)
        .then(mapToPromises(Templates.render))
        .then(rendered_template => FS.writeFile())
        .then(() => config);
};
exports.buildScripts = function (config) {
    return Scripts.detect(config.source, config.target)
        .then(Scripts.compile)
        .then(Scripts.bundle)
        .then(() => config);
};
exports.buildStyles = function (config) {
    return Styles.detect(config.source, config.target)
        .then(Styles.compile)
        .then(() => config);
};
exports.buildStatics = function (config) {
    const source_dir = Path.join(config.source, "statics");
    const target_dir = Path.join(config.target, "statics");
    return FS.copy(source_dir, target_dir)
        .then(() => config);
};
exports.deploy = function (source, target, region) {
    const s3 = new AWS.S3({ region });
    return Glob(source).then(function (files) {
        return Promise.all(files.map(function (file) {
            return FS.readFile(file).then(function (buffer) {
                const put_config = {
                    Body: buffer,
                    Bucket: target,
                    Key: file.replace(source + "/", ""),
                    ContentType: Mime.getType(file) // content-type is needed since S3 is bad at guessing mime types
                };
                return s3.putObject(put_config).promise();
            });
        }));
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xpZW50cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNsaWVudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBOEI7QUFDOUIsNkJBQTRCO0FBQzVCLCtCQUE4QjtBQUM5QiwrQkFBOEI7QUFDOUIsNkJBQTRCO0FBRTVCLHFDQUFvQztBQUNwQyxtQ0FBa0M7QUFDbEMseUNBQXdDO0FBRXhDLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQTtBQU9aLFFBQUEsU0FBUyxHQUFHLFVBQVcsTUFBYyxFQUFFLE1BQWM7SUFDOUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUUsQ0FBQTtBQUNoRCxDQUFDLENBQUE7QUFFRCxNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBRSxJQUFJLENBQUMsR0FBRyxDQUFFLEVBQUUsQ0FBRSxDQUFFLENBQUE7QUFFcEQsUUFBQSxjQUFjLEdBQUcsVUFBVyxNQUFjO0lBQ25ELE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUU7U0FDbkMsSUFBSSxDQUFFLGFBQWEsQ0FBRSxTQUFTLENBQUMsTUFBTSxDQUFFLENBQUU7U0FDekMsSUFBSSxDQUFFLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUU7U0FDM0MsSUFBSSxDQUFFLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBRSxDQUFBO0FBQzdCLENBQUMsQ0FBQTtBQUVZLFFBQUEsWUFBWSxHQUFHLFVBQVcsTUFBYztJQUNqRCxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBRSxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUU7U0FDaEQsSUFBSSxDQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUU7U0FDdkIsSUFBSSxDQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUU7U0FDdEIsSUFBSSxDQUFFLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBRSxDQUFBO0FBQzdCLENBQUMsQ0FBQTtBQUVZLFFBQUEsV0FBVyxHQUFHLFVBQVcsTUFBYztJQUNoRCxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBRSxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUU7U0FDL0MsSUFBSSxDQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUU7U0FDdEIsSUFBSSxDQUFFLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBRSxDQUFBO0FBQzdCLENBQUMsQ0FBQTtBQUVZLFFBQUEsWUFBWSxHQUFHLFVBQVcsTUFBYztJQUNqRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFFLENBQUE7SUFDeEQsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBRSxNQUFNLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBRSxDQUFBO0lBRXhELE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFFLFVBQVUsRUFBRSxVQUFVLENBQUU7U0FDbkMsSUFBSSxDQUFFLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBRSxDQUFBO0FBQzdCLENBQUMsQ0FBQTtBQUVZLFFBQUEsTUFBTSxHQUFHLFVBQVcsTUFBYyxFQUFFLE1BQWMsRUFBRSxNQUFjO0lBQzNFLE1BQU0sRUFBRSxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBRSxFQUFFLE1BQU0sRUFBRSxDQUFFLENBQUE7SUFFbkMsTUFBTSxDQUFDLElBQUksQ0FBRSxNQUFNLENBQUUsQ0FBQyxJQUFJLENBQUUsVUFBVyxLQUFLO1FBQ3hDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFFLEtBQUssQ0FBQyxHQUFHLENBQUUsVUFBVyxJQUFJO1lBQzFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFFLElBQUksQ0FBRSxDQUFDLElBQUksQ0FBRSxVQUFXLE1BQU07Z0JBQzlDLE1BQU0sVUFBVSxHQUFHO29CQUNmLElBQUksRUFBRSxNQUFNO29CQUNaLE1BQU0sRUFBRSxNQUFNO29CQUNkLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFFLE1BQU0sR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFFO29CQUNyQyxXQUFXLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBRSxJQUFJLENBQUUsQ0FBQyxnRUFBZ0U7aUJBQ3JHLENBQUE7Z0JBQ0QsTUFBTSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUUsVUFBVSxDQUFFLENBQUMsT0FBTyxFQUFFLENBQUE7WUFDL0MsQ0FBQyxDQUFFLENBQUE7UUFDUCxDQUFDLENBQUUsQ0FBRSxDQUFBO0lBQ1QsQ0FBQyxDQUFFLENBQUE7QUFDUCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBGUyBmcm9tIFwiZnMtZXh0cmFcIlxuaW1wb3J0ICogYXMgUGF0aCBmcm9tIFwicGF0aFwiXG5pbXBvcnQgKiBhcyBBV1MgZnJvbSBcImF3cy1zZGtcIlxuaW1wb3J0ICogYXMgR2xvYiBmcm9tIFwiZ2xvYmJ5XCJcbmltcG9ydCAqIGFzIE1pbWUgZnJvbSBcIm1pbWVcIlxuXG5pbXBvcnQgKiBhcyBTY3JpcHRzIGZyb20gXCIuL1NjcmlwdHNcIlxuaW1wb3J0ICogYXMgU3R5bGVzIGZyb20gXCIuL1N0eWxlc1wiXG5pbXBvcnQgKiBhcyBUZW1wbGF0ZXMgZnJvbSBcIi4vVGVtcGxhdGVzXCJcblxuY29uc3QgY3dkID0gcHJvY2Vzcy5jd2QoKVxuXG50eXBlIENvbmZpZyA9IHtcbiAgICBzb3VyY2U6IHN0cmluZyxcbiAgICB0YXJnZXQ6IHN0cmluZ1xufVxuXG5leHBvcnQgY29uc3QgY29uZmlndXJlID0gZnVuY3Rpb24gKCBzb3VyY2U6IHN0cmluZywgdGFyZ2V0OiBzdHJpbmcgKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSggeyBzb3VyY2UsIHRhcmdldCB9IClcbn1cblxuY29uc3QgbWFwVG9Qcm9taXNlcyA9IGZuID0+IGxpc3QgPT4gUHJvbWlzZS5hbGwoIGxpc3QubWFwKCBmbiApIClcblxuZXhwb3J0IGNvbnN0IGJ1aWxkVGVtcGxhdGVzID0gZnVuY3Rpb24gKCBjb25maWc6IENvbmZpZyApIHtcbiAgICByZXR1cm4gVGVtcGxhdGVzLmRldGVjdCggY29uZmlnLnNvdXJjZSApXG4gICAgICAgIC50aGVuKCBtYXBUb1Byb21pc2VzKCBUZW1wbGF0ZXMucmVuZGVyICkgKVxuICAgICAgICAudGhlbiggcmVuZGVyZWRfdGVtcGxhdGUgPT4gRlMud3JpdGVGaWxlKCkgKVxuICAgICAgICAudGhlbiggKCkgPT4gY29uZmlnIClcbn1cblxuZXhwb3J0IGNvbnN0IGJ1aWxkU2NyaXB0cyA9IGZ1bmN0aW9uICggY29uZmlnOiBDb25maWcgKSB7XG4gICAgcmV0dXJuIFNjcmlwdHMuZGV0ZWN0KCBjb25maWcuc291cmNlLCBjb25maWcudGFyZ2V0IClcbiAgICAgICAgLnRoZW4oIFNjcmlwdHMuY29tcGlsZSApXG4gICAgICAgIC50aGVuKCBTY3JpcHRzLmJ1bmRsZSApXG4gICAgICAgIC50aGVuKCAoKSA9PiBjb25maWcgKVxufVxuXG5leHBvcnQgY29uc3QgYnVpbGRTdHlsZXMgPSBmdW5jdGlvbiAoIGNvbmZpZzogQ29uZmlnICkge1xuICAgIHJldHVybiBTdHlsZXMuZGV0ZWN0KCBjb25maWcuc291cmNlLCBjb25maWcudGFyZ2V0IClcbiAgICAgICAgLnRoZW4oIFN0eWxlcy5jb21waWxlIClcbiAgICAgICAgLnRoZW4oICgpID0+IGNvbmZpZyApXG59XG5cbmV4cG9ydCBjb25zdCBidWlsZFN0YXRpY3MgPSBmdW5jdGlvbiAoIGNvbmZpZzogQ29uZmlnICkge1xuICAgIGNvbnN0IHNvdXJjZV9kaXIgPSBQYXRoLmpvaW4oIGNvbmZpZy5zb3VyY2UsIFwic3RhdGljc1wiIClcbiAgICBjb25zdCB0YXJnZXRfZGlyID0gUGF0aC5qb2luKCBjb25maWcudGFyZ2V0LCBcInN0YXRpY3NcIiApXG5cbiAgICByZXR1cm4gRlMuY29weSggc291cmNlX2RpciwgdGFyZ2V0X2RpciApXG4gICAgICAgIC50aGVuKCAoKSA9PiBjb25maWcgKVxufVxuXG5leHBvcnQgY29uc3QgZGVwbG95ID0gZnVuY3Rpb24gKCBzb3VyY2U6IHN0cmluZywgdGFyZ2V0OiBzdHJpbmcsIHJlZ2lvbjogc3RyaW5nICkge1xuICAgIGNvbnN0IHMzID0gbmV3IEFXUy5TMyggeyByZWdpb24gfSApXG5cbiAgICByZXR1cm4gR2xvYiggc291cmNlICkudGhlbiggZnVuY3Rpb24gKCBmaWxlcyApIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKCBmaWxlcy5tYXAoIGZ1bmN0aW9uICggZmlsZSApIHtcbiAgICAgICAgICAgIHJldHVybiBGUy5yZWFkRmlsZSggZmlsZSApLnRoZW4oIGZ1bmN0aW9uICggYnVmZmVyICkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHB1dF9jb25maWcgPSB7XG4gICAgICAgICAgICAgICAgICAgIEJvZHk6IGJ1ZmZlcixcbiAgICAgICAgICAgICAgICAgICAgQnVja2V0OiB0YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgIEtleTogZmlsZS5yZXBsYWNlKCBzb3VyY2UgKyBcIi9cIiwgXCJcIiApLFxuICAgICAgICAgICAgICAgICAgICBDb250ZW50VHlwZTogTWltZS5nZXRUeXBlKCBmaWxlICkgLy8gY29udGVudC10eXBlIGlzIG5lZWRlZCBzaW5jZSBTMyBpcyBiYWQgYXQgZ3Vlc3NpbmcgbWltZSB0eXBlc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gczMucHV0T2JqZWN0KCBwdXRfY29uZmlnICkucHJvbWlzZSgpXG4gICAgICAgICAgICB9IClcbiAgICAgICAgfSApIClcbiAgICB9IClcbn1cbiJdfQ==