"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const FS = require("fs-extra");
const Path = require("path");
const Glob = require("globby");
const helpers = {
    module: function (ctx, module_uri) {
        const type = ctx.dev ? "module" : "application/javascript";
        const src = ctx.dev ? module_uri : module_uri + ".js";
        return `<script type="${type}" src="${src}"></script>`;
    }
};
const mapObject = function (fn, object) {
    return Object.keys(object).map(key => fn(key, object[key]));
};
const renderStyle = style => `
    <link rel="stylesheet" href="${style}">
`;
const renderModule = is_dev => function (path) {
    const type = is_dev ? "module" : "application/javascript";
    return `<script type="${type}" src="${path}"></script>`;
};
const renderScript = is_dev => function (name, paths) {
    const path = is_dev ? paths.local : paths.remote;
    return `<script type="application/javascript" src="${path}"></script>`;
};
exports.render = function (config) {
    return `
<!DOCTYPE html>

<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>${config.title}</title>
    
    ${config.styles.map(renderStyle).join("")}
    ${mapObject(renderScript(config.dev), config.scripts).join("")}
    ${config.modules.map(renderModule(config.dev)).join("")}
</head>

<body></body>

</html>
    `;
};
exports.renderOld = function (template_string, context) {
    return template_string.replace(/@([a-zA-Z\.]*)\((.*)\)/g, function (_, name, args) {
        try {
            const fn = `return helpers.${name}( ctx, ${args})`;
            return new Function("helpers", "ctx", fn).apply(null, [helpers, context]);
        }
        catch (e) {
            return '';
        }
    });
};
exports.compile = function (template) {
    return FS.readFile(template.source, "utf8")
        .then(template_string => exports.renderOld(template_string, { dev: false }))
        .then(compiled_template => FS.writeFile(template.target, compiled_template, "utf8"));
};
const file2Template = (target) => function (file) {
    return {
        source: file, target: Path.join(target, Path.basename(file))
    };
};
exports.detect = function (source, target) {
    const html_files_pattern = Path.join(source, "**", "*.html");
    return FS.ensureDir(target)
        .then(() => Glob(html_files_pattern))
        .then(files => files.map(file2Template(target)));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVtcGxhdGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVGVtcGxhdGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQThCO0FBQzlCLDZCQUE0QjtBQUM1QiwrQkFBOEI7QUFPOUIsTUFBTSxPQUFPLEdBQUc7SUFDWixNQUFNLEVBQUUsVUFBVyxHQUFHLEVBQUUsVUFBVTtRQUM5QixNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLHdCQUF3QixDQUFBO1FBQzFELE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQTtRQUNyRCxNQUFNLENBQUMsaUJBQWlCLElBQUksVUFBVSxHQUFHLGFBQWEsQ0FBQTtJQUMxRCxDQUFDO0NBQ0osQ0FBQTtBQUVELE1BQU0sU0FBUyxHQUFHLFVBQVcsRUFBRSxFQUFFLE1BQU07SUFDbkMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUUsTUFBTSxDQUFFLENBQUMsR0FBRyxDQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFFLEdBQUcsRUFBRSxNQUFNLENBQUUsR0FBRyxDQUFFLENBQUUsQ0FBRSxDQUFBO0FBQ3ZFLENBQUMsQ0FBQTtBQUVELE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7bUNBQ00sS0FBSztDQUN2QyxDQUFBO0FBRUQsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxVQUFXLElBQUk7SUFDMUMsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLHdCQUF3QixDQUFBO0lBQ3pELE1BQU0sQ0FBQyxpQkFBaUIsSUFBSSxVQUFVLElBQUksYUFBYSxDQUFBO0FBQzNELENBQUMsQ0FBQTtBQUVELE1BQU0sWUFBWSxHQUFH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QUFFLENBQUE7QUFDOUQsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgRlMgZnJvbSBcImZzLWV4dHJhXCJcbmltcG9ydCAqIGFzIFBhdGggZnJvbSBcInBhdGhcIlxuaW1wb3J0ICogYXMgR2xvYiBmcm9tIFwiZ2xvYmJ5XCJcblxuZXhwb3J0IHR5cGUgVGVtcGxhdGUgPSB7XG4gICAgc291cmNlOiBzdHJpbmcsXG4gICAgdGFyZ2V0OiBzdHJpbmdcbn1cblxuY29uc3QgaGVscGVycyA9IHtcbiAgICBtb2R1bGU6IGZ1bmN0aW9uICggY3R4LCBtb2R1bGVfdXJpICkge1xuICAgICAgICBjb25zdCB0eXBlID0gY3R4LmRldiA/IFwibW9kdWxlXCIgOiBcImFwcGxpY2F0aW9uL2phdmFzY3JpcHRcIlxuICAgICAgICBjb25zdCBzcmMgPSBjdHguZGV2ID8gbW9kdWxlX3VyaSA6IG1vZHVsZV91cmkgKyBcIi5qc1wiXG4gICAgICAgIHJldHVybiBgPHNjcmlwdCB0eXBlPVwiJHt0eXBlfVwiIHNyYz1cIiR7c3JjfVwiPjwvc2NyaXB0PmBcbiAgICB9XG59XG5cbmNvbnN0IG1hcE9iamVjdCA9IGZ1bmN0aW9uICggZm4sIG9iamVjdCApIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoIG9iamVjdCApLm1hcCgga2V5ID0+IGZuKCBrZXksIG9iamVjdFsga2V5IF0gKSApXG59XG5cbmNvbnN0IHJlbmRlclN0eWxlID0gc3R5bGUgPT4gYFxuICAgIDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiJHtzdHlsZX1cIj5cbmBcblxuY29uc3QgcmVuZGVyTW9kdWxlID0gaXNfZGV2ID0+IGZ1bmN0aW9uICggcGF0aCApIHtcbiAgICBjb25zdCB0eXBlID0gaXNfZGV2ID8gXCJtb2R1bGVcIiA6IFwiYXBwbGljYXRpb24vamF2YXNjcmlwdFwiXG4gICAgcmV0dXJuIGA8c2NyaXB0IHR5cGU9XCIke3R5cGV9XCIgc3JjPVwiJHtwYXRofVwiPjwvc2NyaXB0PmBcbn1cblxuY29uc3QgcmVuZGVyU2NyaXB0ID0gaXNfZGV2ID0+IGZ1bmN0aW9uICggbmFtZSwgcGF0aHMgKSB7XG4gICAgY29uc3QgcGF0aCA9IGlzX2RldiA/IHBhdGhzLmxvY2FsIDogcGF0aHMucmVtb3RlXG4gICAgcmV0dXJuIGA8c2NyaXB0IHR5cGU9XCJhcHBsaWNhdGlvbi9qYXZhc2NyaXB0XCIgc3JjPVwiJHtwYXRofVwiPjwvc2NyaXB0PmBcbn1cblxuZXhwb3J0IGNvbnN0IHJlbmRlciA9IGZ1bmN0aW9uICggY29uZmlnICkge1xuICAgIHJldHVybiBgXG48IURPQ1RZUEUgaHRtbD5cblxuPGh0bWwgbGFuZz1cImVuXCI+XG5cbjxoZWFkPlxuICAgIDxtZXRhIGNoYXJzZXQ9XCJVVEYtOFwiPlxuICAgIDxtZXRhIGh0dHAtZXF1aXY9XCJ4LXVhLWNvbXBhdGlibGVcIiBjb250ZW50PVwiaWU9ZWRnZVwiPlxuICAgIDxtZXRhIG5hbWU9XCJ2aWV3cG9ydFwiIGNvbnRlbnQ9XCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MVwiPlxuICAgIDx0aXRsZT4ke2NvbmZpZy50aXRsZX08L3RpdGxlPlxuICAgIFxuICAgICR7IGNvbmZpZy5zdHlsZXMubWFwKCByZW5kZXJTdHlsZSApLmpvaW4oIFwiXCIgKSB9XG4gICAgJHsgbWFwT2JqZWN0KCByZW5kZXJTY3JpcHQoIGNvbmZpZy5kZXYgKSwgY29uZmlnLnNjcmlwdHMgKS5qb2luKCBcIlwiICl9XG4gICAgJHsgY29uZmlnLm1vZHVsZXMubWFwKCByZW5kZXJNb2R1bGUoIGNvbmZpZy5kZXYgKSApLmpvaW4oIFwiXCIgKX1cbjwvaGVhZD5cblxuPGJvZHk+PC9ib2R5PlxuXG48L2h0bWw+XG4gICAgYFxufVxuXG5leHBvcnQgY29uc3QgcmVuZGVyT2xkID0gZnVuY3Rpb24gKCB0ZW1wbGF0ZV9zdHJpbmc6IHN0cmluZywgY29udGV4dDogYW55ICkge1xuICAgIHJldHVybiB0ZW1wbGF0ZV9zdHJpbmcucmVwbGFjZSggL0AoW2EtekEtWlxcLl0qKVxcKCguKilcXCkvZywgZnVuY3Rpb24gKCBfLCBuYW1lLCBhcmdzICkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZm4gPSBgcmV0dXJuIGhlbHBlcnMuJHsgbmFtZSB9KCBjdHgsICR7IGFyZ3MgfSlgXG4gICAgICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKCBcImhlbHBlcnNcIiwgXCJjdHhcIiwgZm4gKS5hcHBseSggbnVsbCwgWyBoZWxwZXJzLCBjb250ZXh0IF0gKVxuICAgICAgICB9IGNhdGNoICggZSApIHtcbiAgICAgICAgICAgIHJldHVybiAnJ1xuICAgICAgICB9XG4gICAgfSApXG59XG5cbmV4cG9ydCBjb25zdCBjb21waWxlID0gZnVuY3Rpb24gKCB0ZW1wbGF0ZTogVGVtcGxhdGUgKSB7XG4gICAgcmV0dXJuIEZTLnJlYWRGaWxlKCB0ZW1wbGF0ZS5zb3VyY2UsIFwidXRmOFwiIClcbiAgICAgICAgLnRoZW4oIHRlbXBsYXRlX3N0cmluZyA9PiByZW5kZXJPbGQoIHRlbXBsYXRlX3N0cmluZywgeyBkZXY6IGZhbHNlIH0gKSApXG4gICAgICAgIC50aGVuKCBjb21waWxlZF90ZW1wbGF0ZSA9PiBGUy53cml0ZUZpbGUoIHRlbXBsYXRlLnRhcmdldCwgY29tcGlsZWRfdGVtcGxhdGUsIFwidXRmOFwiICkgKVxufVxuXG5jb25zdCBmaWxlMlRlbXBsYXRlID0gKCB0YXJnZXQ6IHN0cmluZyApID0+IGZ1bmN0aW9uICggZmlsZTogc3RyaW5nICk6IFRlbXBsYXRlIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzb3VyY2U6IGZpbGUsIHRhcmdldDogUGF0aC5qb2luKCB0YXJnZXQsIFBhdGguYmFzZW5hbWUoIGZpbGUgKSApXG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgZGV0ZWN0ID0gZnVuY3Rpb24gKCBzb3VyY2U6IHN0cmluZywgdGFyZ2V0OiBzdHJpbmcgKTogUHJvbWlzZTxUZW1wbGF0ZVtdPiB7XG4gICAgY29uc3QgaHRtbF9maWxlc19wYXR0ZXJuID0gUGF0aC5qb2luKCBzb3VyY2UsIFwiKipcIiwgXCIqLmh0bWxcIiApXG5cbiAgICByZXR1cm4gRlMuZW5zdXJlRGlyKCB0YXJnZXQgKVxuICAgICAgICAudGhlbiggKCkgPT4gR2xvYiggaHRtbF9maWxlc19wYXR0ZXJuICkgKVxuICAgICAgICAudGhlbiggZmlsZXMgPT4gZmlsZXMubWFwKCBmaWxlMlRlbXBsYXRlKCB0YXJnZXQgKSApIClcbn1cbiJdfQ==