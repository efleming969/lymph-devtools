"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const FS = require("fs-extra");
const Path = require("path");
const Glob = require("globby");
const Utils_1 = require("./Utils");
const renderStyle = style => `<link rel="stylesheet" href="${style}">`;
const renderModule = is_dev => function (path) {
    const type = is_dev ? "module" : "application/javascript";
    const src = path + (is_dev ? "" : ".js");
    return `<script type="${type}" src="${src}"></script>`;
};
const renderScript = is_dev => function (script) {
    const path = is_dev ? script.local : script.remote;
    return `<script type="application/javascript" src="${path}"></script>`;
};
exports.render = function (template) {
    const { name, config, dev } = template;
    const text = Utils_1.multiline `
        | <!DOCTYPE html>

        | <html lang="en">

        | <head>
        |     <meta charset="UTF-8">
        |     <meta http-equiv="x-ua-compatible" content="ie=edge">
        |     <meta name="viewport" content="width=device-width, initial-scale=1">
        |     <title>${config.title}</title>

        |     ${config.styles.map(renderStyle).join("")}

        |     ${config.scripts.map(renderScript(dev)).join("")}
        |     ${config.modules.map(renderModule(dev)).join("")}
        | </head>

        | <body></body>

        | </html>
    `;
    return { name, dev, config, text };
};
exports.read = function (config_file_path) {
    const name = Path.basename(config_file_path, ".json");
    return FS.readFile(config_file_path, "utf8")
        .then(config_string => JSON.parse(config_string))
        .then(config => ({ name, config, text: "" }));
};
exports.detect = function (source_dir) {
    const config_file_pattern = Path.join(source_dir, "*.json");
    const parseToTemplateConfig = config_string => JSON.parse(config_string);
    return Glob(config_file_pattern).then(function (config_file_paths) {
        return config_file_paths.map(function (config_file_path) {
            const name = Path.basename(config_file_path, ".json");
            return FS.readFile(config_file_path, "utf8")
                .then(parseToTemplateConfig)
                .then(config => ({ name, config, text: "" }));
        });
    }).then(parse_config_promises => Promise.all(parse_config_promises));
};
exports.write = (target) => function (template) {
    const file_name = Path.join(target, template.name + ".html");
    return FS.ensureDir(target)
        .then(() => FS.writeFile(file_name, template.text, "utf8"));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVtcGxhdGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVGVtcGxhdGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQThCO0FBQzlCLDZCQUE0QjtBQUM1QiwrQkFBOEI7QUFFOUIsbUNBQW1DO0FBc0JuQyxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLGdDQUFnQyxLQUFLLElBQUksQ0FBQTtBQUV0RSxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLFVBQVcsSUFBSTtJQUMxQyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsd0JBQXdCLENBQUE7SUFDekQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3hDLE1BQU0sQ0FBQyxpQkFBaUIsSUFBSSxVQUFVLEdBQUcsYUFBYSxDQUFBO0FBQzFELENBQUMsQ0FBQTtBQUVELE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsVUFBVyxNQUFzQjtJQUM1RCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUE7SUFDbEQsTUFBTSxDQUFDLDhDQUE4QyxJQUFJLGFBQWEsQ0FBQTtBQUMxRSxDQUFDLENBQUE7QUFFWSxRQUFBLE1BQU0sR0FBRyxVQUFXLFFBQWtCO0lBQy9DLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLFFBQVEsQ0FBQTtJQUV0QyxNQUFNLElBQUksR0FBRyxpQkFBUyxDQUFBOzs7Ozs7Ozs7dUJBU0gsTUFBTSxDQUFDLEtBQUs7O2dCQUVsQixNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBRSxXQUFXLENBQUUsQ0FBQyxJQUFJLENBQUUsRUFBRSxDQUFHOztnQkFFNUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUUsWUFBWSxDQUFFLEdBQUcsQ0FBRSxDQUFFLENBQUMsSUFBSSxDQUFFLEVBQUUsQ0FBRTtnQkFDcEQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUUsWUFBWSxDQUFFLEdBQUcsQ0FBRSxDQUFFLENBQUMsSUFBSSxDQUFFLEVBQUUsQ0FBRTs7Ozs7O0tBTWhFLENBQUE7SUFFRCxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQTtBQUN0QyxDQUFDLENBQUE7QUFFWSxRQUFBLElBQUksR0FBRyxVQUFXLGdCQUF3QjtJQUNuRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFFLGdCQUFnQixFQUFFLE9BQU8sQ0FBRSxDQUFBO0lBQ3ZELE1BQU0sQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFFLGdCQUFnQixFQUFFLE1BQU0sQ0FBRTtTQUN6QyxJQUFJLENBQUUsYUFBYSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFFLGFBQWEsQ0FBb0IsQ0FBRTtTQUN0RSxJQUFJLENBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBRSxDQUFBO0FBQ3ZELENBQUMsQ0FBQTtBQUVZLFFBQUEsTUFBTSxHQUFHLFVBQVcsVUFBa0I7SUFDL0MsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFFLFVBQVUsRUFBRSxRQUFRLENBQUUsQ0FBQTtJQUU3RCxNQUFNLHFCQUFxQixHQUFHLGFBQWEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBRSxhQUFhLENBQW9CLENBQUE7SUFFNUYsTUFBTSxDQUFDLElBQUksQ0FBRSxtQkFBbUIsQ0FBRSxDQUFDLElBQUksQ0FBRSxVQUFXLGlCQUFpQjtRQUNqRSxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFFLFVBQVcsZ0JBQWdCO1lBQ3JELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUUsZ0JBQWdCLEVBQUUsT0FBTyxDQUFFLENBQUE7WUFDdkQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUUsZ0JBQWdCLEVBQUUsTUFBTSxDQUFFO2lCQUN6QyxJQUFJLENBQUUscUJBQXFCLENBQUU7aUJBQzdCLElBQUksQ0FBRSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFFLENBQUE7UUFDdkQsQ0FBQyxDQUFFLENBQUE7SUFDUCxDQUFDLENBQUUsQ0FBQyxJQUFJLENBQUUscUJBQXFCLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUUscUJBQXFCLENBQUUsQ0FBRSxDQUFBO0FBQzdFLENBQUMsQ0FBQTtBQUVZLFFBQUEsS0FBSyxHQUFHLENBQUUsTUFBYyxFQUFHLEVBQUUsQ0FBQyxVQUFXLFFBQWtCO0lBQ3BFLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFFLENBQUE7SUFDOUQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUUsTUFBTSxDQUFFO1NBQ3hCLElBQUksQ0FBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFFLFNBQVMsRUFBRSxRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBRSxDQUFFLENBQUE7QUFDdkUsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgRlMgZnJvbSBcImZzLWV4dHJhXCJcbmltcG9ydCAqIGFzIFBhdGggZnJvbSBcInBhdGhcIlxuaW1wb3J0ICogYXMgR2xvYiBmcm9tIFwiZ2xvYmJ5XCJcblxuaW1wb3J0IHsgbXVsdGlsaW5lIH0gZnJvbSBcIi4vVXRpbHNcIlxuXG5leHBvcnQgdHlwZSBUZW1wbGF0ZVNjcmlwdCA9IHtcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgbG9jYWw6IHN0cmluZyxcbiAgICByZW1vdGU6IHN0cmluZ1xufVxuXG5leHBvcnQgdHlwZSBUZW1wbGF0ZUNvbmZpZyA9IHtcbiAgICB0aXRsZTogc3RyaW5nLFxuICAgIHN0eWxlczogc3RyaW5nW10sXG4gICAgc2NyaXB0czogVGVtcGxhdGVTY3JpcHRbXSxcbiAgICBtb2R1bGVzOiBzdHJpbmdbXVxufVxuXG5leHBvcnQgdHlwZSBUZW1wbGF0ZSA9IHtcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgY29uZmlnOiBUZW1wbGF0ZUNvbmZpZyxcbiAgICB0ZXh0OiBzdHJpbmcsXG4gICAgZGV2OiBib29sZWFuXG59XG5cbmNvbnN0IHJlbmRlclN0eWxlID0gc3R5bGUgPT4gYDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiJHtzdHlsZX1cIj5gXG5cbmNvbnN0IHJlbmRlck1vZHVsZSA9IGlzX2RldiA9PiBmdW5jdGlvbiAoIHBhdGggKSB7XG4gICAgY29uc3QgdHlwZSA9IGlzX2RldiA/IFwibW9kdWxlXCIgOiBcImFwcGxpY2F0aW9uL2phdmFzY3JpcHRcIlxuICAgIGNvbnN0IHNyYyA9IHBhdGggKyAoaXNfZGV2ID8gXCJcIiA6IFwiLmpzXCIpXG4gICAgcmV0dXJuIGA8c2NyaXB0IHR5cGU9XCIke3R5cGV9XCIgc3JjPVwiJHtzcmN9XCI+PC9zY3JpcHQ+YFxufVxuXG5jb25zdCByZW5kZXJTY3JpcHQgPSBpc19kZXYgPT4gZnVuY3Rpb24gKCBzY3JpcHQ6IFRlbXBsYXRlU2NyaXB0ICkge1xuICAgIGNvbnN0IHBhdGggPSBpc19kZXYgPyBzY3JpcHQubG9jYWwgOiBzY3JpcHQucmVtb3RlXG4gICAgcmV0dXJuIGA8c2NyaXB0IHR5cGU9XCJhcHBsaWNhdGlvbi9qYXZhc2NyaXB0XCIgc3JjPVwiJHtwYXRofVwiPjwvc2NyaXB0PmBcbn1cblxuZXhwb3J0IGNvbnN0IHJlbmRlciA9IGZ1bmN0aW9uICggdGVtcGxhdGU6IFRlbXBsYXRlICkge1xuICAgIGNvbnN0IHsgbmFtZSwgY29uZmlnLCBkZXYgfSA9IHRlbXBsYXRlXG5cbiAgICBjb25zdCB0ZXh0ID0gbXVsdGlsaW5lYFxuICAgICAgICB8IDwhRE9DVFlQRSBodG1sPlxuXG4gICAgICAgIHwgPGh0bWwgbGFuZz1cImVuXCI+XG5cbiAgICAgICAgfCA8aGVhZD5cbiAgICAgICAgfCAgICAgPG1ldGEgY2hhcnNldD1cIlVURi04XCI+XG4gICAgICAgIHwgICAgIDxtZXRhIGh0dHAtZXF1aXY9XCJ4LXVhLWNvbXBhdGlibGVcIiBjb250ZW50PVwiaWU9ZWRnZVwiPlxuICAgICAgICB8ICAgICA8bWV0YSBuYW1lPVwidmlld3BvcnRcIiBjb250ZW50PVwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTFcIj5cbiAgICAgICAgfCAgICAgPHRpdGxlPiR7Y29uZmlnLnRpdGxlfTwvdGl0bGU+XG5cbiAgICAgICAgfCAgICAgJHsgY29uZmlnLnN0eWxlcy5tYXAoIHJlbmRlclN0eWxlICkuam9pbiggXCJcIiApIH1cblxuICAgICAgICB8ICAgICAkeyBjb25maWcuc2NyaXB0cy5tYXAoIHJlbmRlclNjcmlwdCggZGV2ICkgKS5qb2luKCBcIlwiICl9XG4gICAgICAgIHwgICAgICR7IGNvbmZpZy5tb2R1bGVzLm1hcCggcmVuZGVyTW9kdWxlKCBkZXYgKSApLmpvaW4oIFwiXCIgKX1cbiAgICAgICAgfCA8L2hlYWQ+XG5cbiAgICAgICAgfCA8Ym9keT48L2JvZHk+XG5cbiAgICAgICAgfCA8L2h0bWw+XG4gICAgYFxuXG4gICAgcmV0dXJuIHsgbmFtZSwgZGV2LCBjb25maWcsIHRleHQgfVxufVxuXG5leHBvcnQgY29uc3QgcmVhZCA9IGZ1bmN0aW9uICggY29uZmlnX2ZpbGVfcGF0aDogc3RyaW5nICk6IFByb21pc2U8VGVtcGxhdGU+IHtcbiAgICBjb25zdCBuYW1lID0gUGF0aC5iYXNlbmFtZSggY29uZmlnX2ZpbGVfcGF0aCwgXCIuanNvblwiIClcbiAgICByZXR1cm4gRlMucmVhZEZpbGUoIGNvbmZpZ19maWxlX3BhdGgsIFwidXRmOFwiIClcbiAgICAgICAgLnRoZW4oIGNvbmZpZ19zdHJpbmcgPT4gSlNPTi5wYXJzZSggY29uZmlnX3N0cmluZyApIGFzIFRlbXBsYXRlQ29uZmlnIClcbiAgICAgICAgLnRoZW4oIGNvbmZpZyA9PiAoeyBuYW1lLCBjb25maWcsIHRleHQ6IFwiXCIgfSkgKVxufVxuXG5leHBvcnQgY29uc3QgZGV0ZWN0ID0gZnVuY3Rpb24gKCBzb3VyY2VfZGlyOiBzdHJpbmcgKTogUHJvbWlzZTxUZW1wbGF0ZVtdPiB7XG4gICAgY29uc3QgY29uZmlnX2ZpbGVfcGF0dGVybiA9IFBhdGguam9pbiggc291cmNlX2RpciwgXCIqLmpzb25cIiApXG5cbiAgICBjb25zdCBwYXJzZVRvVGVtcGxhdGVDb25maWcgPSBjb25maWdfc3RyaW5nID0+IEpTT04ucGFyc2UoIGNvbmZpZ19zdHJpbmcgKSBhcyBUZW1wbGF0ZUNvbmZpZ1xuXG4gICAgcmV0dXJuIEdsb2IoIGNvbmZpZ19maWxlX3BhdHRlcm4gKS50aGVuKCBmdW5jdGlvbiAoIGNvbmZpZ19maWxlX3BhdGhzICkge1xuICAgICAgICByZXR1cm4gY29uZmlnX2ZpbGVfcGF0aHMubWFwKCBmdW5jdGlvbiAoIGNvbmZpZ19maWxlX3BhdGggKSB7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gUGF0aC5iYXNlbmFtZSggY29uZmlnX2ZpbGVfcGF0aCwgXCIuanNvblwiIClcbiAgICAgICAgICAgIHJldHVybiBGUy5yZWFkRmlsZSggY29uZmlnX2ZpbGVfcGF0aCwgXCJ1dGY4XCIgKVxuICAgICAgICAgICAgICAgIC50aGVuKCBwYXJzZVRvVGVtcGxhdGVDb25maWcgKVxuICAgICAgICAgICAgICAgIC50aGVuKCBjb25maWcgPT4gKHsgbmFtZSwgY29uZmlnLCB0ZXh0OiBcIlwiIH0pIClcbiAgICAgICAgfSApXG4gICAgfSApLnRoZW4oIHBhcnNlX2NvbmZpZ19wcm9taXNlcyA9PiBQcm9taXNlLmFsbCggcGFyc2VfY29uZmlnX3Byb21pc2VzICkgKVxufVxuXG5leHBvcnQgY29uc3Qgd3JpdGUgPSAoIHRhcmdldDogc3RyaW5nICkgPT4gZnVuY3Rpb24gKCB0ZW1wbGF0ZTogVGVtcGxhdGUgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgZmlsZV9uYW1lID0gUGF0aC5qb2luKCB0YXJnZXQsIHRlbXBsYXRlLm5hbWUgKyBcIi5odG1sXCIgKVxuICAgIHJldHVybiBGUy5lbnN1cmVEaXIoIHRhcmdldCApXG4gICAgICAgIC50aGVuKCAoKSA9PiBGUy53cml0ZUZpbGUoIGZpbGVfbmFtZSwgdGVtcGxhdGUudGV4dCwgXCJ1dGY4XCIgKSApXG59XG4iXX0=