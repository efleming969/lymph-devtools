"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const FS = require("fs-extra");
const Path = require("path");
const Glob = require("globby");
const Utils_1 = require("./Utils");
const renderStyle = style => `<link rel="stylesheet" href="${style}">`;
const renderModule = is_dev => function (path) {
    const type = is_dev ? "module" : "application/javascript";
    return `<script type="${type}" src="${path}"></script>`;
};
const renderScript = is_dev => function (script) {
    const path = is_dev ? script.local : script.remote;
    return `<script type="application/javascript" src="${path}"></script>`;
};
exports.render = function (template) {
    const { name, config, dev } = template;
    const text = Utils_1.multiline `
        | <!DOCTYPE html>

        | <html lang="en">

        | <head>
        |     <meta charset="UTF-8">
        |     <meta http-equiv="x-ua-compatible" content="ie=edge">
        |     <meta name="viewport" content="width=device-width, initial-scale=1">
        |     <title>${config.title}</title>

        |     ${config.styles.map(renderStyle).join("")}

        |     ${config.scripts.map(renderScript(dev)).join("")}
        |     ${config.modules.map(renderModule(dev)).join("")}
        | </head>

        | <body></body>

        | </html>
    `;
    return { name, dev, config, text };
};
exports.detect = function (source_dir) {
    const config_file_pattern = Path.join(source_dir, "*.json");
    const parseToTemplateConfig = config_string => JSON.parse(config_string);
    return Glob(config_file_pattern).then(function (config_file_paths) {
        return config_file_paths.map(function (config_file_path) {
            const name = Path.basename(config_file_path, ".json");
            return FS.readFile(config_file_path, "utf8")
                .then(parseToTemplateConfig)
                .then(config => ({ name, config, text: "" }));
        });
    }).then(parse_config_promises => Promise.all(parse_config_promises));
};
exports.write = (target) => function (template) {
    const file_name = Path.join(target, template.name + ".html");
    return FS.ensureDir(target)
        .then(() => FS.writeFile(file_name, template.text, "utf8"));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVtcGxhdGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVGVtcGxhdGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQThCO0FBQzlCLDZCQUE0QjtBQUM1QiwrQkFBOEI7QUFFOUIsbUNBQW1DO0FBc0JuQyxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLGdDQUFnQyxLQUFLLElBQUksQ0FBQTtBQUV0RSxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLFVBQVcsSUFBSTtJQUMxQyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsd0JBQXdCLENBQUE7SUFDekQsTUFBTSxDQUFDLGlCQUFpQixJQUFJLFVBQVUsSUFBSSxhQUFhLENBQUE7QUFDM0QsQ0FBQyxDQUFBO0FBRUQsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxVQUFXLE1BQXNCO0lBQzVELE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQTtJQUNsRCxNQUFNLENBQUMsOENBQThDLElBQUksYUFBYSxDQUFBO0FBQzFFLENBQUMsQ0FBQTtBQUVZLFFBQUEsTUFBTSxHQUFHLFVBQVcsUUFBa0I7SUFDL0MsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsUUFBUSxDQUFBO0lBRXRDLE1BQU0sSUFBSSxHQUFHLGlCQUFTLENBQUE7Ozs7Ozs7Ozt1QkFTSCxNQUFNLENBQUMsS0FBSzs7Z0JBRWxCLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFFLFdBQVcsQ0FBRSxDQUFDLElBQUksQ0FBRSxFQUFFLENBQUc7O2dCQUU1QyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBRSxZQUFZLENBQUUsR0FBRyxDQUFFLENBQUUsQ0FBQyxJQUFJLENBQUUsRUFBRSxDQUFFO2dCQUNwRCxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBRSxZQUFZLENBQUUsR0FBRyxDQUFFLENBQUUsQ0FBQyxJQUFJLENBQUUsRUFBRSxDQUFFOzs7Ozs7S0FNaEUsQ0FBQTtJQUVELE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFBO0FBQ3RDLENBQUMsQ0FBQTtBQUVZLFFBQUEsTUFBTSxHQUFHLFVBQVcsVUFBa0I7SUFDL0MsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFFLFVBQVUsRUFBRSxRQUFRLENBQUUsQ0FBQTtJQUU3RCxNQUFNLHFCQUFxQixHQUFHLGFBQWEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBRSxhQUFhLENBQW9CLENBQUE7SUFFNUYsTUFBTSxDQUFDLElBQUksQ0FBRSxtQkFBbUIsQ0FBRSxDQUFDLElBQUksQ0FBRSxVQUFXLGlCQUFpQjtRQUNqRSxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFFLFVBQVcsZ0JBQWdCO1lBQ3JELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUUsZ0JBQWdCLEVBQUUsT0FBTyxDQUFFLENBQUE7WUFDdkQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUUsZ0JBQWdCLEVBQUUsTUFBTSxDQUFFO2lCQUN6QyxJQUFJLENBQUUscUJBQXFCLENBQUU7aUJBQzdCLElBQUksQ0FBRSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFFLENBQUE7UUFDdkQsQ0FBQyxDQUFFLENBQUE7SUFDUCxDQUFDLENBQUUsQ0FBQyxJQUFJLENBQUUscUJBQXFCLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUUscUJBQXFCLENBQUUsQ0FBRSxDQUFBO0FBQzdFLENBQUMsQ0FBQTtBQUVZLFFBQUEsS0FBSyxHQUFHLENBQUUsTUFBYyxFQUFHLEVBQUUsQ0FBQyxVQUFXLFFBQWtCO0lBQ3BFLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFFLENBQUE7SUFDOUQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUUsTUFBTSxDQUFFO1NBQ3hCLElBQUksQ0FBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFFLFNBQVMsRUFBRSxRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBRSxDQUFFLENBQUE7QUFDdkUsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgRlMgZnJvbSBcImZzLWV4dHJhXCJcbmltcG9ydCAqIGFzIFBhdGggZnJvbSBcInBhdGhcIlxuaW1wb3J0ICogYXMgR2xvYiBmcm9tIFwiZ2xvYmJ5XCJcblxuaW1wb3J0IHsgbXVsdGlsaW5lIH0gZnJvbSBcIi4vVXRpbHNcIlxuXG5leHBvcnQgdHlwZSBUZW1wbGF0ZVNjcmlwdCA9IHtcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgbG9jYWw6IHN0cmluZyxcbiAgICByZW1vdGU6IHN0cmluZ1xufVxuXG5leHBvcnQgdHlwZSBUZW1wbGF0ZUNvbmZpZyA9IHtcbiAgICB0aXRsZTogc3RyaW5nLFxuICAgIHN0eWxlczogc3RyaW5nW10sXG4gICAgc2NyaXB0czogVGVtcGxhdGVTY3JpcHRbXSxcbiAgICBtb2R1bGVzOiBzdHJpbmdbXVxufVxuXG5leHBvcnQgdHlwZSBUZW1wbGF0ZSA9IHtcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgY29uZmlnOiBUZW1wbGF0ZUNvbmZpZyxcbiAgICB0ZXh0OiBzdHJpbmcsXG4gICAgZGV2OiBib29sZWFuXG59XG5cbmNvbnN0IHJlbmRlclN0eWxlID0gc3R5bGUgPT4gYDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiJHtzdHlsZX1cIj5gXG5cbmNvbnN0IHJlbmRlck1vZHVsZSA9IGlzX2RldiA9PiBmdW5jdGlvbiAoIHBhdGggKSB7XG4gICAgY29uc3QgdHlwZSA9IGlzX2RldiA/IFwibW9kdWxlXCIgOiBcImFwcGxpY2F0aW9uL2phdmFzY3JpcHRcIlxuICAgIHJldHVybiBgPHNjcmlwdCB0eXBlPVwiJHt0eXBlfVwiIHNyYz1cIiR7cGF0aH1cIj48L3NjcmlwdD5gXG59XG5cbmNvbnN0IHJlbmRlclNjcmlwdCA9IGlzX2RldiA9PiBmdW5jdGlvbiAoIHNjcmlwdDogVGVtcGxhdGVTY3JpcHQgKSB7XG4gICAgY29uc3QgcGF0aCA9IGlzX2RldiA/IHNjcmlwdC5sb2NhbCA6IHNjcmlwdC5yZW1vdGVcbiAgICByZXR1cm4gYDxzY3JpcHQgdHlwZT1cImFwcGxpY2F0aW9uL2phdmFzY3JpcHRcIiBzcmM9XCIke3BhdGh9XCI+PC9zY3JpcHQ+YFxufVxuXG5leHBvcnQgY29uc3QgcmVuZGVyID0gZnVuY3Rpb24gKCB0ZW1wbGF0ZTogVGVtcGxhdGUgKSB7XG4gICAgY29uc3QgeyBuYW1lLCBjb25maWcsIGRldiB9ID0gdGVtcGxhdGVcblxuICAgIGNvbnN0IHRleHQgPSBtdWx0aWxpbmVgXG4gICAgICAgIHwgPCFET0NUWVBFIGh0bWw+XG5cbiAgICAgICAgfCA8aHRtbCBsYW5nPVwiZW5cIj5cblxuICAgICAgICB8IDxoZWFkPlxuICAgICAgICB8ICAgICA8bWV0YSBjaGFyc2V0PVwiVVRGLThcIj5cbiAgICAgICAgfCAgICAgPG1ldGEgaHR0cC1lcXVpdj1cIngtdWEtY29tcGF0aWJsZVwiIGNvbnRlbnQ9XCJpZT1lZGdlXCI+XG4gICAgICAgIHwgICAgIDxtZXRhIG5hbWU9XCJ2aWV3cG9ydFwiIGNvbnRlbnQ9XCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MVwiPlxuICAgICAgICB8ICAgICA8dGl0bGU+JHtjb25maWcudGl0bGV9PC90aXRsZT5cblxuICAgICAgICB8ICAgICAkeyBjb25maWcuc3R5bGVzLm1hcCggcmVuZGVyU3R5bGUgKS5qb2luKCBcIlwiICkgfVxuXG4gICAgICAgIHwgICAgICR7IGNvbmZpZy5zY3JpcHRzLm1hcCggcmVuZGVyU2NyaXB0KCBkZXYgKSApLmpvaW4oIFwiXCIgKX1cbiAgICAgICAgfCAgICAgJHsgY29uZmlnLm1vZHVsZXMubWFwKCByZW5kZXJNb2R1bGUoIGRldiApICkuam9pbiggXCJcIiApfVxuICAgICAgICB8IDwvaGVhZD5cblxuICAgICAgICB8IDxib2R5PjwvYm9keT5cblxuICAgICAgICB8IDwvaHRtbD5cbiAgICBgXG5cbiAgICByZXR1cm4geyBuYW1lLCBkZXYsIGNvbmZpZywgdGV4dCB9XG59XG5cbmV4cG9ydCBjb25zdCBkZXRlY3QgPSBmdW5jdGlvbiAoIHNvdXJjZV9kaXI6IHN0cmluZyApOiBQcm9taXNlPFRlbXBsYXRlW10+IHtcbiAgICBjb25zdCBjb25maWdfZmlsZV9wYXR0ZXJuID0gUGF0aC5qb2luKCBzb3VyY2VfZGlyLCBcIiouanNvblwiIClcblxuICAgIGNvbnN0IHBhcnNlVG9UZW1wbGF0ZUNvbmZpZyA9IGNvbmZpZ19zdHJpbmcgPT4gSlNPTi5wYXJzZSggY29uZmlnX3N0cmluZyApIGFzIFRlbXBsYXRlQ29uZmlnXG5cbiAgICByZXR1cm4gR2xvYiggY29uZmlnX2ZpbGVfcGF0dGVybiApLnRoZW4oIGZ1bmN0aW9uICggY29uZmlnX2ZpbGVfcGF0aHMgKSB7XG4gICAgICAgIHJldHVybiBjb25maWdfZmlsZV9wYXRocy5tYXAoIGZ1bmN0aW9uICggY29uZmlnX2ZpbGVfcGF0aCApIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBQYXRoLmJhc2VuYW1lKCBjb25maWdfZmlsZV9wYXRoLCBcIi5qc29uXCIgKVxuICAgICAgICAgICAgcmV0dXJuIEZTLnJlYWRGaWxlKCBjb25maWdfZmlsZV9wYXRoLCBcInV0ZjhcIiApXG4gICAgICAgICAgICAgICAgLnRoZW4oIHBhcnNlVG9UZW1wbGF0ZUNvbmZpZyApXG4gICAgICAgICAgICAgICAgLnRoZW4oIGNvbmZpZyA9PiAoeyBuYW1lLCBjb25maWcsIHRleHQ6IFwiXCIgfSkgKVxuICAgICAgICB9IClcbiAgICB9ICkudGhlbiggcGFyc2VfY29uZmlnX3Byb21pc2VzID0+IFByb21pc2UuYWxsKCBwYXJzZV9jb25maWdfcHJvbWlzZXMgKSApXG59XG5cbmV4cG9ydCBjb25zdCB3cml0ZSA9ICggdGFyZ2V0OiBzdHJpbmcgKSA9PiBmdW5jdGlvbiAoIHRlbXBsYXRlOiBUZW1wbGF0ZSApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBmaWxlX25hbWUgPSBQYXRoLmpvaW4oIHRhcmdldCwgdGVtcGxhdGUubmFtZSArIFwiLmh0bWxcIiApXG4gICAgcmV0dXJuIEZTLmVuc3VyZURpciggdGFyZ2V0IClcbiAgICAgICAgLnRoZW4oICgpID0+IEZTLndyaXRlRmlsZSggZmlsZV9uYW1lLCB0ZW1wbGF0ZS50ZXh0LCBcInV0ZjhcIiApIClcbn1cbiJdfQ==