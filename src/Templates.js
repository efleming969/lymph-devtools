"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const FS = require("fs-extra");
const Path = require("path");
const Glob = require("globby");
const Utils_1 = require("./Utils");
const helpers = {
    module: function (ctx, module_uri) {
        const type = ctx.dev ? "module" : "application/javascript";
        const src = ctx.dev ? module_uri : module_uri + ".js";
        return `<script type="${type}" src="${src}"></script>`;
    }
};
const mapObject = function (fn, object) {
    return Object.keys(object).map(key => fn(key, object[key]));
};
const renderStyle = style => `<link rel="stylesheet" href="${style}">`;
const renderModule = is_dev => function (path) {
    const type = is_dev ? "module" : "application/javascript";
    return `<script type="${type}" src="${path}"></script>`;
};
const renderScript = is_dev => function (script) {
    const path = is_dev ? script.local : script.remote;
    return `<script type="application/javascript" src="${path}"></script>`;
};
exports.render = function (config) {
    return Utils_1.multiline `
        | <!DOCTYPE html>

        | <html lang="en">

        | <head>
        |     <meta charset="UTF-8">
        |     <meta http-equiv="x-ua-compatible" content="ie=edge">
        |     <meta name="viewport" content="width=device-width, initial-scale=1">
        |     <title>${config.title}</title>

        |     ${config.styles.map(renderStyle).join("")}

        |     ${config.scripts.map(renderScript(config.dev)).join("")}
        |     ${config.modules.map(renderModule(config.dev)).join("")}
        | </head>

        | <body></body>

        | </html>
    `;
};
exports.detect = function (source_dir) {
    const config_file_pattern = Path.join(source_dir, "*.json");
    return Glob(config_file_pattern).then(function (config_file_paths) {
        const readFilePromises = config_file_paths.map(function (config_file_path) {
            return FS.readFile(config_file_path, "utf8")
                .then(config_string => JSON.parse(config_string));
        });
        return Promise.all(readFilePromises);
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVtcGxhdGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVGVtcGxhdGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQThCO0FBQzlCLDZCQUE0QjtBQUM1QiwrQkFBOEI7QUFFOUIsbUNBQW1DO0FBc0JuQyxNQUFNLE9BQU8sR0FBRztJQUNaLE1BQU0sRUFBRSxVQUFXLEdBQUcsRUFBRSxVQUFVO1FBQzlCLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsd0JBQXdCLENBQUE7UUFDMUQsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFBO1FBQ3JELE1BQU0sQ0FBQyxpQkFBaUIsSUFBSSxVQUFVLEdBQUcsYUFBYSxDQUFBO0lBQzFELENBQUM7Q0FDSixDQUFBO0FBRUQsTUFBTSxTQUFTLEdBQUcsVUFBVyxFQUFFLEVBQUUsTUFBTTtJQUNuQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBRSxNQUFNLENBQUUsQ0FBQyxHQUFHLENBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBRSxHQUFHLENBQUUsQ0FBRSxDQUFFLENBQUE7QUFDdkUsQ0FBQyxDQUFBO0FBRUQsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxnQ0FBZ0MsS0FBSyxJQUFJLENBQUE7QUFFdEUsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxVQUFXLElBQUk7SUFDMUMsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLHdCQUF3QixDQUFBO0lBQ3pELE1BQU0sQ0FBQyxpQkFBaUIsSUFBSSxVQUFVLElBQUksYUFBYSxDQUFBO0FBQzNELENBQUMsQ0FBQTtBQUVELE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsVUFBVyxNQUFzQjtJQUM1RCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUE7SUFDbEQsTUFBTSxDQUFDLDhDQUE4QyxJQUFJLGFBQWEsQ0FBQTtBQUMxRSxDQUFDLENBQUE7QUFFWSxRQUFBLE1BQU0sR0FBRyxVQUFXLE1BQXNCO0lBQ25ELE1BQU0sQ0FBQyxpQkFBUyxDQUFBOzs7Ozs7Ozs7dUJBU0csTUFBTSxDQUFDLEtBQUs7O2dCQUVsQixNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBRSxXQUFXLENBQUUsQ0FBQyxJQUFJLENBQUUsRUFBRSxDQUFHOztnQkFFNUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUUsWUFBWSxDQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUUsQ0FBRSxDQUFDLElBQUksQ0FBRSxFQUFFLENBQUU7Z0JBQzNELE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFFLFlBQVksQ0FBRSxNQUFNLENBQUMsR0FBRyxDQUFFLENBQUUsQ0FBQyxJQUFJLENBQUUsRUFBRSxDQUFFOzs7Ozs7S0FNdkUsQ0FBQTtBQUNMLENBQUMsQ0FBQTtBQUVZLFFBQUEsTUFBTSxHQUFHLFVBQVcsVUFBa0I7SUFDL0MsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFFLFVBQVUsRUFBRSxRQUFRLENBQUUsQ0FBQTtJQUU3RCxNQUFNLENBQUMsSUFBSSxDQUFFLG1CQUFtQixDQUFFLENBQUMsSUFBSSxDQUFFLFVBQVcsaUJBQWlCO1FBQ2pFLE1BQU0sZ0JBQWdCLEdBQUcsaUJBQWlCLENBQUMsR0FBRyxDQUFFLFVBQVcsZ0JBQWdCO1lBQ3ZFLE1BQU0sQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFFLGdCQUFnQixFQUFFLE1BQU0sQ0FBRTtpQkFDekMsSUFBSSxDQUFFLGFBQWEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBRSxhQUFhLENBQW9CLENBQUUsQ0FBQTtRQUMvRSxDQUFDLENBQUUsQ0FBQTtRQUVILE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFFLGdCQUFnQixDQUFFLENBQUE7SUFDMUMsQ0FBQyxDQUFFLENBQUE7QUFDUCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBGUyBmcm9tIFwiZnMtZXh0cmFcIlxuaW1wb3J0ICogYXMgUGF0aCBmcm9tIFwicGF0aFwiXG5pbXBvcnQgKiBhcyBHbG9iIGZyb20gXCJnbG9iYnlcIlxuXG5pbXBvcnQgeyBtdWx0aWxpbmUgfSBmcm9tIFwiLi9VdGlsc1wiXG5cbmV4cG9ydCB0eXBlIFRlbXBsYXRlU2NyaXB0ID0ge1xuICAgIG5hbWU6IHN0cmluZyxcbiAgICBsb2NhbDogc3RyaW5nLFxuICAgIHJlbW90ZTogc3RyaW5nXG59XG5cbmV4cG9ydCB0eXBlIFRlbXBsYXRlQ29uZmlnID0ge1xuICAgIG5hbWU6IHN0cmluZyxcbiAgICBkZXY6IGJvb2xlYW4sXG4gICAgdGl0bGU6IHN0cmluZyxcbiAgICBzdHlsZXM6IHN0cmluZ1tdLFxuICAgIHNjcmlwdHM6IFRlbXBsYXRlU2NyaXB0W10sXG4gICAgbW9kdWxlczogc3RyaW5nW11cbn1cblxuZXhwb3J0IHR5cGUgVGVtcGxhdGUgPSB7XG4gICAgc291cmNlOiBzdHJpbmcsXG4gICAgdGFyZ2V0OiBzdHJpbmdcbn1cblxuY29uc3QgaGVscGVycyA9IHtcbiAgICBtb2R1bGU6IGZ1bmN0aW9uICggY3R4LCBtb2R1bGVfdXJpICkge1xuICAgICAgICBjb25zdCB0eXBlID0gY3R4LmRldiA/IFwibW9kdWxlXCIgOiBcImFwcGxpY2F0aW9uL2phdmFzY3JpcHRcIlxuICAgICAgICBjb25zdCBzcmMgPSBjdHguZGV2ID8gbW9kdWxlX3VyaSA6IG1vZHVsZV91cmkgKyBcIi5qc1wiXG4gICAgICAgIHJldHVybiBgPHNjcmlwdCB0eXBlPVwiJHt0eXBlfVwiIHNyYz1cIiR7c3JjfVwiPjwvc2NyaXB0PmBcbiAgICB9XG59XG5cbmNvbnN0IG1hcE9iamVjdCA9IGZ1bmN0aW9uICggZm4sIG9iamVjdCApIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoIG9iamVjdCApLm1hcCgga2V5ID0+IGZuKCBrZXksIG9iamVjdFsga2V5IF0gKSApXG59XG5cbmNvbnN0IHJlbmRlclN0eWxlID0gc3R5bGUgPT4gYDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiJHtzdHlsZX1cIj5gXG5cbmNvbnN0IHJlbmRlck1vZHVsZSA9IGlzX2RldiA9PiBmdW5jdGlvbiAoIHBhdGggKSB7XG4gICAgY29uc3QgdHlwZSA9IGlzX2RldiA/IFwibW9kdWxlXCIgOiBcImFwcGxpY2F0aW9uL2phdmFzY3JpcHRcIlxuICAgIHJldHVybiBgPHNjcmlwdCB0eXBlPVwiJHt0eXBlfVwiIHNyYz1cIiR7cGF0aH1cIj48L3NjcmlwdD5gXG59XG5cbmNvbnN0IHJlbmRlclNjcmlwdCA9IGlzX2RldiA9PiBmdW5jdGlvbiAoIHNjcmlwdDogVGVtcGxhdGVTY3JpcHQgKSB7XG4gICAgY29uc3QgcGF0aCA9IGlzX2RldiA/IHNjcmlwdC5sb2NhbCA6IHNjcmlwdC5yZW1vdGVcbiAgICByZXR1cm4gYDxzY3JpcHQgdHlwZT1cImFwcGxpY2F0aW9uL2phdmFzY3JpcHRcIiBzcmM9XCIke3BhdGh9XCI+PC9zY3JpcHQ+YFxufVxuXG5leHBvcnQgY29uc3QgcmVuZGVyID0gZnVuY3Rpb24gKCBjb25maWc6IFRlbXBsYXRlQ29uZmlnICkge1xuICAgIHJldHVybiBtdWx0aWxpbmVgXG4gICAgICAgIHwgPCFET0NUWVBFIGh0bWw+XG5cbiAgICAgICAgfCA8aHRtbCBsYW5nPVwiZW5cIj5cblxuICAgICAgICB8IDxoZWFkPlxuICAgICAgICB8ICAgICA8bWV0YSBjaGFyc2V0PVwiVVRGLThcIj5cbiAgICAgICAgfCAgICAgPG1ldGEgaHR0cC1lcXVpdj1cIngtdWEtY29tcGF0aWJsZVwiIGNvbnRlbnQ9XCJpZT1lZGdlXCI+XG4gICAgICAgIHwgICAgIDxtZXRhIG5hbWU9XCJ2aWV3cG9ydFwiIGNvbnRlbnQ9XCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MVwiPlxuICAgICAgICB8ICAgICA8dGl0bGU+JHtjb25maWcudGl0bGV9PC90aXRsZT5cblxuICAgICAgICB8ICAgICAkeyBjb25maWcuc3R5bGVzLm1hcCggcmVuZGVyU3R5bGUgKS5qb2luKCBcIlwiICkgfVxuXG4gICAgICAgIHwgICAgICR7IGNvbmZpZy5zY3JpcHRzLm1hcCggcmVuZGVyU2NyaXB0KCBjb25maWcuZGV2ICkgKS5qb2luKCBcIlwiICl9XG4gICAgICAgIHwgICAgICR7IGNvbmZpZy5tb2R1bGVzLm1hcCggcmVuZGVyTW9kdWxlKCBjb25maWcuZGV2ICkgKS5qb2luKCBcIlwiICl9XG4gICAgICAgIHwgPC9oZWFkPlxuXG4gICAgICAgIHwgPGJvZHk+PC9ib2R5PlxuXG4gICAgICAgIHwgPC9odG1sPlxuICAgIGBcbn1cblxuZXhwb3J0IGNvbnN0IGRldGVjdCA9IGZ1bmN0aW9uICggc291cmNlX2Rpcjogc3RyaW5nICk6IFByb21pc2U8VGVtcGxhdGVDb25maWdbXT4ge1xuICAgIGNvbnN0IGNvbmZpZ19maWxlX3BhdHRlcm4gPSBQYXRoLmpvaW4oIHNvdXJjZV9kaXIsIFwiKi5qc29uXCIgKVxuXG4gICAgcmV0dXJuIEdsb2IoIGNvbmZpZ19maWxlX3BhdHRlcm4gKS50aGVuKCBmdW5jdGlvbiAoIGNvbmZpZ19maWxlX3BhdGhzICkge1xuICAgICAgICBjb25zdCByZWFkRmlsZVByb21pc2VzID0gY29uZmlnX2ZpbGVfcGF0aHMubWFwKCBmdW5jdGlvbiAoIGNvbmZpZ19maWxlX3BhdGggKSB7XG4gICAgICAgICAgICByZXR1cm4gRlMucmVhZEZpbGUoIGNvbmZpZ19maWxlX3BhdGgsIFwidXRmOFwiIClcbiAgICAgICAgICAgICAgICAudGhlbiggY29uZmlnX3N0cmluZyA9PiBKU09OLnBhcnNlKCBjb25maWdfc3RyaW5nICkgYXMgVGVtcGxhdGVDb25maWcgKVxuICAgICAgICB9IClcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoIHJlYWRGaWxlUHJvbWlzZXMgKVxuICAgIH0gKVxufVxuIl19