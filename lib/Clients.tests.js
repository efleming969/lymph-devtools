"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const FS = require("fs-extra");
const Path = require("path");
const glob = require("globby");
const Clients = require("./Clients");
const sample_source = Path.join("src", "samples", "clients");
const sample_target = Path.join("build", "clients");
const config = { source: sample_source, target: sample_target };
const removeBuildDirectory = () => FS.remove(sample_target);
const removeAllJSFiles = function () {
    const js_pattern = Path.join(sample_source, "**", "*.js");
    return glob(js_pattern).then(function (js_files) {
        return Promise.all(js_files.map(f => FS.remove(f)));
    });
};
afterAll(removeAllJSFiles);
afterAll(removeBuildDirectory);
test("compile scripts to source directory", function () {
    return Clients.buildScripts(config).then(function () {
        const scripts_dir = Path.join("src", "samples", "clients", "scripts");
        return glob("src/samples/clients/**/*.js").then(function (files) {
            expect(files.sort()).toEqual([
                Path.join(scripts_dir, "/GreetingBuilder.js"),
                Path.join(scripts_dir, "/Main.js"),
                Path.join(scripts_dir, "/Simple.js")
            ]);
        });
    });
});
test("creating bundles in build directory", function () {
    return Clients.buildScripts(config).then(function () {
        return glob("build/**/*.js").then(function (files) {
            expect(files).toEqual(["build/clients/scripts/Main.js"]);
        });
    });
});
test("compiling styles to build directory", function () {
    return Clients.buildStyles(config).then(function () {
        return glob("build/**/*.css").then(function (files) {
            expect(files.sort()).toEqual([
                "build/clients/styles/General.css",
                "build/clients/styles/Main.css"
            ]);
        });
    });
});
test("compiling templates to build directory", function () {
    return Clients.buildTemplates(config).then(function () {
        return glob("build/**/*.html").then(function (files) {
            expect(files.sort()).toEqual([
                "build/clients/Main.html",
            ]);
        });
    });
});
test("copy all static files to build directory", function () {
    return Clients.buildStatics(config)
        .then(() => glob("build/clients/statics"))
        .then(function (files) {
        expect(files.sort()).toEqual([
            "build/clients/statics/nodejs-logo.png",
        ]);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xpZW50cy50ZXN0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNsaWVudHMudGVzdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBOEI7QUFDOUIsNkJBQTRCO0FBQzVCLCtCQUE4QjtBQUU5QixxQ0FBb0M7QUFFcEMsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBRSxDQUFBO0FBQzlELE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUUsT0FBTyxFQUFFLFNBQVMsQ0FBRSxDQUFBO0FBRXJELE1BQU0sTUFBTSxHQUFHLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLENBQUE7QUFFL0QsTUFBTSxvQkFBb0IsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFFLGFBQWEsQ0FBRSxDQUFBO0FBRTdELE1BQU0sZ0JBQWdCLEdBQUc7SUFDckIsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBRSxDQUFBO0lBRTNELE1BQU0sQ0FBQyxJQUFJLENBQUUsVUFBVSxDQUFFLENBQUMsSUFBSSxDQUFFLFVBQVcsUUFBUTtRQUMvQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBRSxRQUFRLENBQUMsR0FBRyxDQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBRSxDQUFDLENBQUUsQ0FBRSxDQUFFLENBQUE7SUFDN0QsQ0FBQyxDQUFFLENBQUE7QUFDUCxDQUFDLENBQUE7QUFFRCxRQUFRLENBQUUsZ0JBQWdCLENBQUUsQ0FBQTtBQUM1QixRQUFRLENBQUUsb0JBQW9CLENBQUUsQ0FBQTtBQUVoQyxJQUFJLENBQUUscUNBQXFDLEVBQUU7SUFDekMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUUsTUFBTSxDQUFFLENBQUMsSUFBSSxDQUFFO1FBQ3hDLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFFLENBQUE7UUFDdkUsTUFBTSxDQUFDLElBQUksQ0FBRSw2QkFBNkIsQ0FBRSxDQUFDLElBQUksQ0FBRSxVQUFXLEtBQWU7WUFDekUsTUFBTSxDQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBRSxDQUFDLE9BQU8sQ0FBRTtnQkFDNUIsSUFBSSxDQUFDLElBQUksQ0FBRSxXQUFXLEVBQUUscUJBQXFCLENBQUU7Z0JBQy9DLElBQUksQ0FBQyxJQUFJLENBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBRTtnQkFDcEMsSUFBSSxDQUFDLElBQUksQ0FBRSxXQUFXLEVBQUUsWUFBWSxDQUFFO2FBQ3pDLENBQUUsQ0FBQTtRQUNQLENBQUMsQ0FBRSxDQUFBO0lBQ1AsQ0FBQyxDQUFFLENBQUE7QUFDUCxDQUFDLENBQUUsQ0FBQTtBQUVILElBQUksQ0FBRSxxQ0FBcUMsRUFBRTtJQUN6QyxNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBRSxNQUFNLENBQUUsQ0FBQyxJQUFJLENBQUU7UUFDeEMsTUFBTSxDQUFDLElBQUksQ0FBRSxlQUFlLENBQUUsQ0FBQyxJQUFJLENBQUUsVUFBVyxLQUFlO1lBQzNELE1BQU0sQ0FBRSxLQUFLLENBQUUsQ0FBQyxPQUFPLENBQUUsQ0FBRSwrQkFBK0IsQ0FBRSxDQUFFLENBQUE7UUFDbEUsQ0FBQyxDQUFFLENBQUE7SUFDUCxDQUFDLENBQUUsQ0FBQTtBQUNQLENBQUMsQ0FBRSxDQUFBO0FBRUgsSUFBSSxDQUFFLHFDQUFxQyxFQUFFO0lBQ3pDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFFLE1BQU0sQ0FBRSxDQUFDLElBQUksQ0FBRTtRQUN2QyxNQUFNLENBQUMsSUFBSSxDQUFFLGdCQUFnQixDQUFFLENBQUMsSUFBSSxDQUFFLFVBQVcsS0FBZTtZQUM1RCxNQUFNLENBQUUsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFFLENBQUMsT0FBTyxDQUFFO2dCQUM1QixrQ0FBa0M7Z0JBQ2xDLCtCQUErQjthQUNsQyxDQUFFLENBQUE7UUFDUCxDQUFDLENBQUUsQ0FBQTtJQUNQLENBQUMsQ0FBRSxDQUFBO0FBQ1AsQ0FBQyxDQUFFLENBQUE7QUFHSCxJQUFJLENBQUUsd0NBQXdDLEVBQUU7SUFDNUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUUsTUFBTSxDQUFFLENBQUMsSUFBSSxDQUFFO1FBQzFDLE1BQU0sQ0FBQyxJQUFJLENBQUUsaUJBQWlCLENBQUUsQ0FBQyxJQUFJLENBQUUsVUFBVyxLQUFlO1lBQzdELE1BQU0sQ0FBRSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUUsQ0FBQyxPQUFPLENBQUU7Z0JBQzVCLHlCQUF5QjthQUM1QixDQUFFLENBQUE7UUFDUCxDQUFDLENBQUUsQ0FBQTtJQUNQLENBQUMsQ0FBRSxDQUFBO0FBQ1AsQ0FBQyxDQUFFLENBQUE7QUFFSCxJQUFJLENBQUUsMENBQTBDLEVBQUU7SUFDOUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUUsTUFBTSxDQUFFO1NBQ2hDLElBQUksQ0FBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUUsdUJBQXVCLENBQUUsQ0FBRTtTQUM3QyxJQUFJLENBQUUsVUFBVyxLQUFlO1FBQzdCLE1BQU0sQ0FBRSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUUsQ0FBQyxPQUFPLENBQUU7WUFDNUIsdUNBQXVDO1NBQzFDLENBQUUsQ0FBQTtJQUNQLENBQUMsQ0FBRSxDQUFBO0FBQ1gsQ0FBQyxDQUFFLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBGUyBmcm9tIFwiZnMtZXh0cmFcIlxuaW1wb3J0ICogYXMgUGF0aCBmcm9tIFwicGF0aFwiXG5pbXBvcnQgKiBhcyBnbG9iIGZyb20gXCJnbG9iYnlcIlxuXG5pbXBvcnQgKiBhcyBDbGllbnRzIGZyb20gXCIuL0NsaWVudHNcIlxuXG5jb25zdCBzYW1wbGVfc291cmNlID0gUGF0aC5qb2luKCBcInNyY1wiLCBcInNhbXBsZXNcIiwgXCJjbGllbnRzXCIgKVxuY29uc3Qgc2FtcGxlX3RhcmdldCA9IFBhdGguam9pbiggXCJidWlsZFwiLCBcImNsaWVudHNcIiApXG5cbmNvbnN0IGNvbmZpZyA9IHsgc291cmNlOiBzYW1wbGVfc291cmNlLCB0YXJnZXQ6IHNhbXBsZV90YXJnZXQgfVxuXG5jb25zdCByZW1vdmVCdWlsZERpcmVjdG9yeSA9ICgpID0+IEZTLnJlbW92ZSggc2FtcGxlX3RhcmdldCApXG5cbmNvbnN0IHJlbW92ZUFsbEpTRmlsZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QganNfcGF0dGVybiA9IFBhdGguam9pbiggc2FtcGxlX3NvdXJjZSwgXCIqKlwiLCBcIiouanNcIiApXG5cbiAgICByZXR1cm4gZ2xvYigganNfcGF0dGVybiApLnRoZW4oIGZ1bmN0aW9uICgganNfZmlsZXMgKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbCgganNfZmlsZXMubWFwKCBmID0+IEZTLnJlbW92ZSggZiApICkgKVxuICAgIH0gKVxufVxuXG5hZnRlckFsbCggcmVtb3ZlQWxsSlNGaWxlcyApXG5hZnRlckFsbCggcmVtb3ZlQnVpbGREaXJlY3RvcnkgKVxuXG50ZXN0KCBcImNvbXBpbGUgc2NyaXB0cyB0byBzb3VyY2UgZGlyZWN0b3J5XCIsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gQ2xpZW50cy5idWlsZFNjcmlwdHMoIGNvbmZpZyApLnRoZW4oIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3Qgc2NyaXB0c19kaXIgPSBQYXRoLmpvaW4oIFwic3JjXCIsIFwic2FtcGxlc1wiLCBcImNsaWVudHNcIiwgXCJzY3JpcHRzXCIgKVxuICAgICAgICByZXR1cm4gZ2xvYiggXCJzcmMvc2FtcGxlcy9jbGllbnRzLyoqLyouanNcIiApLnRoZW4oIGZ1bmN0aW9uICggZmlsZXM6IHN0cmluZ1tdICkge1xuICAgICAgICAgICAgZXhwZWN0KCBmaWxlcy5zb3J0KCkgKS50b0VxdWFsKCBbXG4gICAgICAgICAgICAgICAgUGF0aC5qb2luKCBzY3JpcHRzX2RpciwgXCIvR3JlZXRpbmdCdWlsZGVyLmpzXCIgKSxcbiAgICAgICAgICAgICAgICBQYXRoLmpvaW4oIHNjcmlwdHNfZGlyLCBcIi9NYWluLmpzXCIgKSxcbiAgICAgICAgICAgICAgICBQYXRoLmpvaW4oIHNjcmlwdHNfZGlyLCBcIi9TaW1wbGUuanNcIiApXG4gICAgICAgICAgICBdIClcbiAgICAgICAgfSApXG4gICAgfSApXG59IClcblxudGVzdCggXCJjcmVhdGluZyBidW5kbGVzIGluIGJ1aWxkIGRpcmVjdG9yeVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIENsaWVudHMuYnVpbGRTY3JpcHRzKCBjb25maWcgKS50aGVuKCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBnbG9iKCBcImJ1aWxkLyoqLyouanNcIiApLnRoZW4oIGZ1bmN0aW9uICggZmlsZXM6IHN0cmluZ1tdICkge1xuICAgICAgICAgICAgZXhwZWN0KCBmaWxlcyApLnRvRXF1YWwoIFsgXCJidWlsZC9jbGllbnRzL3NjcmlwdHMvTWFpbi5qc1wiIF0gKVxuICAgICAgICB9IClcbiAgICB9IClcbn0gKVxuXG50ZXN0KCBcImNvbXBpbGluZyBzdHlsZXMgdG8gYnVpbGQgZGlyZWN0b3J5XCIsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gQ2xpZW50cy5idWlsZFN0eWxlcyggY29uZmlnICkudGhlbiggZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZ2xvYiggXCJidWlsZC8qKi8qLmNzc1wiICkudGhlbiggZnVuY3Rpb24gKCBmaWxlczogc3RyaW5nW10gKSB7XG4gICAgICAgICAgICBleHBlY3QoIGZpbGVzLnNvcnQoKSApLnRvRXF1YWwoIFtcbiAgICAgICAgICAgICAgICBcImJ1aWxkL2NsaWVudHMvc3R5bGVzL0dlbmVyYWwuY3NzXCIsXG4gICAgICAgICAgICAgICAgXCJidWlsZC9jbGllbnRzL3N0eWxlcy9NYWluLmNzc1wiXG4gICAgICAgICAgICBdIClcbiAgICAgICAgfSApXG4gICAgfSApXG59IClcblxuXG50ZXN0KCBcImNvbXBpbGluZyB0ZW1wbGF0ZXMgdG8gYnVpbGQgZGlyZWN0b3J5XCIsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gQ2xpZW50cy5idWlsZFRlbXBsYXRlcyggY29uZmlnICkudGhlbiggZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZ2xvYiggXCJidWlsZC8qKi8qLmh0bWxcIiApLnRoZW4oIGZ1bmN0aW9uICggZmlsZXM6IHN0cmluZ1tdICkge1xuICAgICAgICAgICAgZXhwZWN0KCBmaWxlcy5zb3J0KCkgKS50b0VxdWFsKCBbXG4gICAgICAgICAgICAgICAgXCJidWlsZC9jbGllbnRzL01haW4uaHRtbFwiLFxuICAgICAgICAgICAgXSApXG4gICAgICAgIH0gKVxuICAgIH0gKVxufSApXG5cbnRlc3QoIFwiY29weSBhbGwgc3RhdGljIGZpbGVzIHRvIGJ1aWxkIGRpcmVjdG9yeVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIENsaWVudHMuYnVpbGRTdGF0aWNzKCBjb25maWcgKVxuICAgICAgICAudGhlbiggKCkgPT4gZ2xvYiggXCJidWlsZC9jbGllbnRzL3N0YXRpY3NcIiApIClcbiAgICAgICAgLnRoZW4oIGZ1bmN0aW9uICggZmlsZXM6IHN0cmluZ1tdICkge1xuICAgICAgICAgICAgZXhwZWN0KCBmaWxlcy5zb3J0KCkgKS50b0VxdWFsKCBbXG4gICAgICAgICAgICAgICAgXCJidWlsZC9jbGllbnRzL3N0YXRpY3Mvbm9kZWpzLWxvZ28ucG5nXCIsXG4gICAgICAgICAgICBdIClcbiAgICAgICAgfSApXG59IClcbiJdfQ==